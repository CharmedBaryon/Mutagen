/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class FindArrayElementInstruction :
        Instruction,
        IEquatable<IFindArrayElementInstructionGetter>,
        IFindArrayElementInstruction,
        ILoquiObjectSetter<FindArrayElementInstruction>
    {
        #region Ctor
        public FindArrayElementInstruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StartFromEnd
        public Boolean StartFromEnd { get; set; } = default;
        #endregion
        #region Identifier
        public StringVariable Identifier { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter IFindArrayElementInstructionGetter.Identifier => Identifier;
        #endregion
        #region String
        public StringVariable String { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter IFindArrayElementInstructionGetter.String => String;
        #endregion
        #region OtherIndex
        public Int32 OtherIndex { get; set; } = default;
        #endregion
        #region StartIndex
        public Int32 StartIndex { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FindArrayElementInstructionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFindArrayElementInstructionGetter rhs) return false;
            return ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IFindArrayElementInstructionGetter? obj)
        {
            return ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Instruction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.StartFromEnd = initialValue;
                this.Identifier = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
                this.String = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
                this.OtherIndex = initialValue;
                this.StartIndex = initialValue;
            }

            public Mask(
                TItem StartFromEnd,
                TItem Identifier,
                TItem String,
                TItem OtherIndex,
                TItem StartIndex)
            : base()
            {
                this.StartFromEnd = StartFromEnd;
                this.Identifier = new MaskItem<TItem, StringVariable.Mask<TItem>?>(Identifier, new StringVariable.Mask<TItem>(Identifier));
                this.String = new MaskItem<TItem, StringVariable.Mask<TItem>?>(String, new StringVariable.Mask<TItem>(String));
                this.OtherIndex = OtherIndex;
                this.StartIndex = StartIndex;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem StartFromEnd;
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? Identifier { get; set; }
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? String { get; set; }
            public TItem OtherIndex;
            public TItem StartIndex;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.StartFromEnd, rhs.StartFromEnd)) return false;
                if (!object.Equals(this.Identifier, rhs.Identifier)) return false;
                if (!object.Equals(this.String, rhs.String)) return false;
                if (!object.Equals(this.OtherIndex, rhs.OtherIndex)) return false;
                if (!object.Equals(this.StartIndex, rhs.StartIndex)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.StartFromEnd);
                hash.Add(this.Identifier);
                hash.Add(this.String);
                hash.Add(this.OtherIndex);
                hash.Add(this.StartIndex);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.StartFromEnd)) return false;
                if (Identifier != null)
                {
                    if (!eval(this.Identifier.Overall)) return false;
                    if (this.Identifier.Specific != null && !this.Identifier.Specific.All(eval)) return false;
                }
                if (String != null)
                {
                    if (!eval(this.String.Overall)) return false;
                    if (this.String.Specific != null && !this.String.Specific.All(eval)) return false;
                }
                if (!eval(this.OtherIndex)) return false;
                if (!eval(this.StartIndex)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.StartFromEnd)) return true;
                if (Identifier != null)
                {
                    if (eval(this.Identifier.Overall)) return true;
                    if (this.Identifier.Specific != null && this.Identifier.Specific.Any(eval)) return true;
                }
                if (String != null)
                {
                    if (eval(this.String.Overall)) return true;
                    if (this.String.Specific != null && this.String.Specific.Any(eval)) return true;
                }
                if (eval(this.OtherIndex)) return true;
                if (eval(this.StartIndex)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FindArrayElementInstruction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.StartFromEnd = eval(this.StartFromEnd);
                obj.Identifier = this.Identifier == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.Identifier.Overall), this.Identifier.Specific?.Translate(eval));
                obj.String = this.String == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.String.Overall), this.String.Specific?.Translate(eval));
                obj.OtherIndex = eval(this.OtherIndex);
                obj.StartIndex = eval(this.StartIndex);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FindArrayElementInstruction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FindArrayElementInstruction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FindArrayElementInstruction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.StartFromEnd ?? true)
                    {
                        fg.AppendItem(StartFromEnd, "StartFromEnd");
                    }
                    if (printMask?.Identifier?.Overall ?? true)
                    {
                        Identifier?.ToString(fg);
                    }
                    if (printMask?.String?.Overall ?? true)
                    {
                        String?.ToString(fg);
                    }
                    if (printMask?.OtherIndex ?? true)
                    {
                        fg.AppendItem(OtherIndex, "OtherIndex");
                    }
                    if (printMask?.StartIndex ?? true)
                    {
                        fg.AppendItem(StartIndex, "StartIndex");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Instruction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? StartFromEnd;
            public MaskItem<Exception?, StringVariable.ErrorMask?>? Identifier;
            public MaskItem<Exception?, StringVariable.ErrorMask?>? String;
            public Exception? OtherIndex;
            public Exception? StartIndex;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FindArrayElementInstruction_FieldIndex enu = (FindArrayElementInstruction_FieldIndex)index;
                switch (enu)
                {
                    case FindArrayElementInstruction_FieldIndex.StartFromEnd:
                        return StartFromEnd;
                    case FindArrayElementInstruction_FieldIndex.Identifier:
                        return Identifier;
                    case FindArrayElementInstruction_FieldIndex.String:
                        return String;
                    case FindArrayElementInstruction_FieldIndex.OtherIndex:
                        return OtherIndex;
                    case FindArrayElementInstruction_FieldIndex.StartIndex:
                        return StartIndex;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FindArrayElementInstruction_FieldIndex enu = (FindArrayElementInstruction_FieldIndex)index;
                switch (enu)
                {
                    case FindArrayElementInstruction_FieldIndex.StartFromEnd:
                        this.StartFromEnd = ex;
                        break;
                    case FindArrayElementInstruction_FieldIndex.Identifier:
                        this.Identifier = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    case FindArrayElementInstruction_FieldIndex.String:
                        this.String = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    case FindArrayElementInstruction_FieldIndex.OtherIndex:
                        this.OtherIndex = ex;
                        break;
                    case FindArrayElementInstruction_FieldIndex.StartIndex:
                        this.StartIndex = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FindArrayElementInstruction_FieldIndex enu = (FindArrayElementInstruction_FieldIndex)index;
                switch (enu)
                {
                    case FindArrayElementInstruction_FieldIndex.StartFromEnd:
                        this.StartFromEnd = (Exception?)obj;
                        break;
                    case FindArrayElementInstruction_FieldIndex.Identifier:
                        this.Identifier = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    case FindArrayElementInstruction_FieldIndex.String:
                        this.String = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    case FindArrayElementInstruction_FieldIndex.OtherIndex:
                        this.OtherIndex = (Exception?)obj;
                        break;
                    case FindArrayElementInstruction_FieldIndex.StartIndex:
                        this.StartIndex = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (StartFromEnd != null) return true;
                if (Identifier != null) return true;
                if (String != null) return true;
                if (OtherIndex != null) return true;
                if (StartIndex != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(StartFromEnd, "StartFromEnd");
                Identifier?.ToString(fg);
                String?.ToString(fg);
                fg.AppendItem(OtherIndex, "OtherIndex");
                fg.AppendItem(StartIndex, "StartIndex");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.StartFromEnd = this.StartFromEnd.Combine(rhs.StartFromEnd);
                ret.Identifier = this.Identifier.Combine(rhs.Identifier, (l, r) => l.Combine(r));
                ret.String = this.String.Combine(rhs.String, (l, r) => l.Combine(r));
                ret.OtherIndex = this.OtherIndex.Combine(rhs.OtherIndex);
                ret.StartIndex = this.StartIndex.Combine(rhs.StartIndex);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Instruction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool StartFromEnd;
            public StringVariable.TranslationMask? Identifier;
            public StringVariable.TranslationMask? String;
            public bool OtherIndex;
            public bool StartIndex;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.StartFromEnd = defaultOn;
                this.OtherIndex = defaultOn;
                this.StartIndex = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((StartFromEnd, null));
                ret.Add((Identifier != null ? Identifier.OnOverall : DefaultOn, Identifier?.GetCrystal()));
                ret.Add((String != null ? String.OnOverall : DefaultOn, String?.GetCrystal()));
                ret.Add((OtherIndex, null));
                ret.Add((StartIndex, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object PexWriteTranslator => FindArrayElementInstructionPexWriteTranslation.Instance;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((FindArrayElementInstructionPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public new static FindArrayElementInstruction CreateFromBinary(PexReader reader)
        {
            var ret = new FindArrayElementInstruction();
            ((FindArrayElementInstructionSetterCommon)((IFindArrayElementInstructionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out FindArrayElementInstruction item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FindArrayElementInstructionSetterCommon)((IFindArrayElementInstructionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FindArrayElementInstruction GetNew()
        {
            return new FindArrayElementInstruction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFindArrayElementInstruction :
        IFindArrayElementInstructionGetter,
        IInstruction,
        ILoquiObjectSetter<IFindArrayElementInstruction>
    {
        new Boolean StartFromEnd { get; set; }
        new StringVariable Identifier { get; set; }
        new StringVariable String { get; set; }
        new Int32 OtherIndex { get; set; }
        new Int32 StartIndex { get; set; }
    }

    public partial interface IFindArrayElementInstructionGetter :
        IInstructionGetter,
        ILoquiObject<IFindArrayElementInstructionGetter>,
        IPexItem
    {
        static new ILoquiRegistration Registration => FindArrayElementInstruction_Registration.Instance;
        Boolean StartFromEnd { get; }
        IStringVariableGetter Identifier { get; }
        IStringVariableGetter String { get; }
        Int32 OtherIndex { get; }
        Int32 StartIndex { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FindArrayElementInstructionMixIn
    {
        public static void Clear(this IFindArrayElementInstruction item)
        {
            ((FindArrayElementInstructionSetterCommon)((IFindArrayElementInstructionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FindArrayElementInstruction.Mask<bool> GetEqualsMask(
            this IFindArrayElementInstructionGetter item,
            IFindArrayElementInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFindArrayElementInstructionGetter item,
            string? name = null,
            FindArrayElementInstruction.Mask<bool>? printMask = null)
        {
            return ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFindArrayElementInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            FindArrayElementInstruction.Mask<bool>? printMask = null)
        {
            ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFindArrayElementInstructionGetter item,
            IFindArrayElementInstructionGetter rhs,
            FindArrayElementInstruction.TranslationMask? equalsMask = null)
        {
            return ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFindArrayElementInstruction lhs,
            IFindArrayElementInstructionGetter rhs,
            out FindArrayElementInstruction.ErrorMask errorMask,
            FindArrayElementInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FindArrayElementInstruction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFindArrayElementInstruction lhs,
            IFindArrayElementInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FindArrayElementInstruction DeepCopy(
            this IFindArrayElementInstructionGetter item,
            FindArrayElementInstruction.TranslationMask? copyMask = null)
        {
            return ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FindArrayElementInstruction DeepCopy(
            this IFindArrayElementInstructionGetter item,
            out FindArrayElementInstruction.ErrorMask errorMask,
            FindArrayElementInstruction.TranslationMask? copyMask = null)
        {
            return ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FindArrayElementInstruction DeepCopy(
            this IFindArrayElementInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IFindArrayElementInstruction item,
            PexReader reader)
        {
            ((FindArrayElementInstructionSetterCommon)((IFindArrayElementInstructionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum FindArrayElementInstruction_FieldIndex
    {
        StartFromEnd = 0,
        Identifier = 1,
        String = 2,
        OtherIndex = 3,
        StartIndex = 4,
    }
    #endregion

    #region Registration
    public partial class FindArrayElementInstruction_Registration : ILoquiRegistration
    {
        public static readonly FindArrayElementInstruction_Registration Instance = new FindArrayElementInstruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 45,
            version: 0);

        public const string GUID = "0bf2872c-1ee1-45d5-bf9f-0f05ff895724";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(FindArrayElementInstruction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FindArrayElementInstruction.ErrorMask);

        public static readonly Type ClassType = typeof(FindArrayElementInstruction);

        public static readonly Type GetterType = typeof(IFindArrayElementInstructionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFindArrayElementInstruction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.FindArrayElementInstruction";

        public const string Name = "FindArrayElementInstruction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(FindArrayElementInstructionPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FindArrayElementInstructionSetterCommon : InstructionSetterCommon
    {
        public new static readonly FindArrayElementInstructionSetterCommon Instance = new FindArrayElementInstructionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFindArrayElementInstruction item)
        {
            ClearPartial();
            item.StartFromEnd = default;
            item.Identifier.Clear();
            item.String.Clear();
            item.OtherIndex = default;
            item.StartIndex = default;
            base.Clear(item);
        }
        
        public override void Clear(IInstruction item)
        {
            Clear(item: (IFindArrayElementInstruction)item);
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IFindArrayElementInstruction item,
            PexReader reader)
        {
            item.Identifier = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
            item.String = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
            reader.EnsureVariableType(VariableType.Integer);
            item.OtherIndex = reader.ReadInt32();
            reader.EnsureVariableType(VariableType.Integer);
            item.StartIndex = reader.ReadInt32();
        }
        
        public override void CopyInFromBinary(
            IInstruction item,
            PexReader reader)
        {
            CopyInFromBinary(
                item: (FindArrayElementInstruction)item,
                reader: reader);
        }
        
        #endregion
        
    }
    public partial class FindArrayElementInstructionCommon : InstructionCommon
    {
        public new static readonly FindArrayElementInstructionCommon Instance = new FindArrayElementInstructionCommon();

        public FindArrayElementInstruction.Mask<bool> GetEqualsMask(
            IFindArrayElementInstructionGetter item,
            IFindArrayElementInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FindArrayElementInstruction.Mask<bool>(false);
            ((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFindArrayElementInstructionGetter item,
            IFindArrayElementInstructionGetter rhs,
            FindArrayElementInstruction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.StartFromEnd = item.StartFromEnd == rhs.StartFromEnd;
            ret.Identifier = MaskItemExt.Factory(item.Identifier.GetEqualsMask(rhs.Identifier, include), include);
            ret.String = MaskItemExt.Factory(item.String.GetEqualsMask(rhs.String, include), include);
            ret.OtherIndex = item.OtherIndex == rhs.OtherIndex;
            ret.StartIndex = item.StartIndex == rhs.StartIndex;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFindArrayElementInstructionGetter item,
            string? name = null,
            FindArrayElementInstruction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFindArrayElementInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            FindArrayElementInstruction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FindArrayElementInstruction =>");
            }
            else
            {
                fg.AppendLine($"{name} (FindArrayElementInstruction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFindArrayElementInstructionGetter item,
            FileGeneration fg,
            FindArrayElementInstruction.Mask<bool>? printMask = null)
        {
            InstructionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.StartFromEnd ?? true)
            {
                fg.AppendItem(item.StartFromEnd, "StartFromEnd");
            }
            if (printMask?.Identifier?.Overall ?? true)
            {
                item.Identifier?.ToString(fg, "Identifier");
            }
            if (printMask?.String?.Overall ?? true)
            {
                item.String?.ToString(fg, "String");
            }
            if (printMask?.OtherIndex ?? true)
            {
                fg.AppendItem(item.OtherIndex, "OtherIndex");
            }
            if (printMask?.StartIndex ?? true)
            {
                fg.AppendItem(item.StartIndex, "StartIndex");
            }
        }
        
        public static FindArrayElementInstruction_FieldIndex ConvertFieldIndex(Instruction_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFindArrayElementInstructionGetter? lhs,
            IFindArrayElementInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IInstructionGetter)lhs, (IInstructionGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.StartFromEnd) ?? true))
            {
                if (lhs.StartFromEnd != rhs.StartFromEnd) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.Identifier) ?? true))
            {
                if (!object.Equals(lhs.Identifier, rhs.Identifier)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.String) ?? true))
            {
                if (!object.Equals(lhs.String, rhs.String)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.OtherIndex) ?? true))
            {
                if (lhs.OtherIndex != rhs.OtherIndex) return false;
            }
            if ((crystal?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.StartIndex) ?? true))
            {
                if (lhs.StartIndex != rhs.StartIndex) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IInstructionGetter? lhs,
            IInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IFindArrayElementInstructionGetter?)lhs,
                rhs: rhs as IFindArrayElementInstructionGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IFindArrayElementInstructionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.StartFromEnd);
            hash.Add(item.Identifier);
            hash.Add(item.String);
            hash.Add(item.OtherIndex);
            hash.Add(item.StartIndex);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IInstructionGetter item)
        {
            return GetHashCode(item: (IFindArrayElementInstructionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FindArrayElementInstruction.GetNew();
        }
        
    }
    public partial class FindArrayElementInstructionSetterTranslationCommon : InstructionSetterTranslationCommon
    {
        public new static readonly FindArrayElementInstructionSetterTranslationCommon Instance = new FindArrayElementInstructionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFindArrayElementInstruction item,
            IFindArrayElementInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IInstruction)item,
                (IInstructionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.StartFromEnd) ?? true))
            {
                item.StartFromEnd = rhs.StartFromEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.Identifier) ?? true))
            {
                errorMask?.PushIndex((int)FindArrayElementInstruction_FieldIndex.Identifier);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.Identifier) ?? true))
                    {
                        item.Identifier = rhs.Identifier.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FindArrayElementInstruction_FieldIndex.Identifier),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.String) ?? true))
            {
                errorMask?.PushIndex((int)FindArrayElementInstruction_FieldIndex.String);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.String) ?? true))
                    {
                        item.String = rhs.String.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FindArrayElementInstruction_FieldIndex.String),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.OtherIndex) ?? true))
            {
                item.OtherIndex = rhs.OtherIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)FindArrayElementInstruction_FieldIndex.StartIndex) ?? true))
            {
                item.StartIndex = rhs.StartIndex;
            }
        }
        
        
        public override void DeepCopyIn(
            IInstruction item,
            IInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFindArrayElementInstruction)item,
                rhs: (IFindArrayElementInstructionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FindArrayElementInstruction DeepCopy(
            IFindArrayElementInstructionGetter item,
            FindArrayElementInstruction.TranslationMask? copyMask = null)
        {
            FindArrayElementInstruction ret = (FindArrayElementInstruction)((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).GetNew();
            ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FindArrayElementInstruction DeepCopy(
            IFindArrayElementInstructionGetter item,
            out FindArrayElementInstruction.ErrorMask errorMask,
            FindArrayElementInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FindArrayElementInstruction ret = (FindArrayElementInstruction)((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).GetNew();
            ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FindArrayElementInstruction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FindArrayElementInstruction DeepCopy(
            IFindArrayElementInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FindArrayElementInstruction ret = (FindArrayElementInstruction)((FindArrayElementInstructionCommon)((IFindArrayElementInstructionGetter)item).CommonInstance()!).GetNew();
            ((FindArrayElementInstructionSetterTranslationCommon)((IFindArrayElementInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class FindArrayElementInstruction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FindArrayElementInstruction_Registration.Instance;
        public new static FindArrayElementInstruction_Registration Registration => FindArrayElementInstruction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FindArrayElementInstructionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FindArrayElementInstructionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FindArrayElementInstructionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class FindArrayElementInstructionPexWriteTranslation :
        InstructionPexWriteTranslation,
        IPexWriteTranslator
    {
        public new readonly static FindArrayElementInstructionPexWriteTranslation Instance = new FindArrayElementInstructionPexWriteTranslation();

        public void Write(
            PexWriter writer,
            IFindArrayElementInstructionGetter item)
        {
            InstructionPexWriteTranslation.Instance.Write(
                item: item,
                writer: writer);
            var IdentifierItem = item.Identifier;
            ((StringVariablePexWriteTranslation)((IPexItem)IdentifierItem).PexWriteTranslator).Write(
                item: IdentifierItem,
                writer: writer);
            var StringItem = item.String;
            ((StringVariablePexWriteTranslation)((IPexItem)StringItem).PexWriteTranslator).Write(
                item: StringItem,
                writer: writer);
            writer.Write((byte)VariableType.Integer);
            writer.Write(item.OtherIndex);
            writer.Write((byte)VariableType.Integer);
            writer.Write(item.StartIndex);
        }

        public override void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IFindArrayElementInstructionGetter)item,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            IInstructionGetter item)
        {
            Write(
                item: (IFindArrayElementInstructionGetter)item,
                writer: writer);
        }

    }

    public partial class FindArrayElementInstructionPexCreateTranslation : InstructionPexCreateTranslation
    {
        public new readonly static FindArrayElementInstructionPexCreateTranslation Instance = new FindArrayElementInstructionPexCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class FindArrayElementInstructionPexTranslationMixIn
    {
    }
    #endregion


}
#endregion

#endregion

