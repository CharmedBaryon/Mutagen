/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class ObjectVariable :
        IEquatable<IObjectVariableGetter>,
        ILoquiObjectSetter<ObjectVariable>,
        IObjectVariable
    {
        #region Ctor
        public ObjectVariable()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; } = string.Empty;
        #endregion
        #region TypeName
        public String TypeName { get; set; } = string.Empty;
        #endregion
        #region RawUserFlags
        public UInt32 RawUserFlags { get; set; } = default;
        #endregion
        #region VariableData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectVariableData? _VariableData;
        public ObjectVariableData? VariableData
        {
            get => _VariableData;
            set => _VariableData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectVariableDataGetter? IObjectVariableGetter.VariableData => this.VariableData;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectVariableMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectVariableGetter rhs) return false;
            return ((ObjectVariableCommon)((IObjectVariableGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectVariableGetter? obj)
        {
            return ((ObjectVariableCommon)((IObjectVariableGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectVariableCommon)((IObjectVariableGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.TypeName = initialValue;
                this.RawUserFlags = initialValue;
                this.VariableData = new MaskItem<TItem, ObjectVariableData.Mask<TItem>?>(initialValue, new ObjectVariableData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Name,
                TItem TypeName,
                TItem RawUserFlags,
                TItem VariableData)
            {
                this.Name = Name;
                this.TypeName = TypeName;
                this.RawUserFlags = RawUserFlags;
                this.VariableData = new MaskItem<TItem, ObjectVariableData.Mask<TItem>?>(VariableData, new ObjectVariableData.Mask<TItem>(VariableData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem TypeName;
            public TItem RawUserFlags;
            public MaskItem<TItem, ObjectVariableData.Mask<TItem>?>? VariableData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TypeName, rhs.TypeName)) return false;
                if (!object.Equals(this.RawUserFlags, rhs.RawUserFlags)) return false;
                if (!object.Equals(this.VariableData, rhs.VariableData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.TypeName);
                hash.Add(this.RawUserFlags);
                hash.Add(this.VariableData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.TypeName)) return false;
                if (!eval(this.RawUserFlags)) return false;
                if (VariableData != null)
                {
                    if (!eval(this.VariableData.Overall)) return false;
                    if (this.VariableData.Specific != null && !this.VariableData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.TypeName)) return true;
                if (eval(this.RawUserFlags)) return true;
                if (VariableData != null)
                {
                    if (eval(this.VariableData.Overall)) return true;
                    if (this.VariableData.Specific != null && this.VariableData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectVariable.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.TypeName = eval(this.TypeName);
                obj.RawUserFlags = eval(this.RawUserFlags);
                obj.VariableData = this.VariableData == null ? null : new MaskItem<R, ObjectVariableData.Mask<R>?>(eval(this.VariableData.Overall), this.VariableData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectVariable.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectVariable.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectVariable.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.TypeName ?? true)
                    {
                        fg.AppendItem(TypeName, "TypeName");
                    }
                    if (printMask?.RawUserFlags ?? true)
                    {
                        fg.AppendItem(RawUserFlags, "RawUserFlags");
                    }
                    if (printMask?.VariableData?.Overall ?? true)
                    {
                        VariableData?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? TypeName;
            public Exception? RawUserFlags;
            public MaskItem<Exception?, ObjectVariableData.ErrorMask?>? VariableData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectVariable_FieldIndex enu = (ObjectVariable_FieldIndex)index;
                switch (enu)
                {
                    case ObjectVariable_FieldIndex.Name:
                        return Name;
                    case ObjectVariable_FieldIndex.TypeName:
                        return TypeName;
                    case ObjectVariable_FieldIndex.RawUserFlags:
                        return RawUserFlags;
                    case ObjectVariable_FieldIndex.VariableData:
                        return VariableData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectVariable_FieldIndex enu = (ObjectVariable_FieldIndex)index;
                switch (enu)
                {
                    case ObjectVariable_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectVariable_FieldIndex.TypeName:
                        this.TypeName = ex;
                        break;
                    case ObjectVariable_FieldIndex.RawUserFlags:
                        this.RawUserFlags = ex;
                        break;
                    case ObjectVariable_FieldIndex.VariableData:
                        this.VariableData = new MaskItem<Exception?, ObjectVariableData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectVariable_FieldIndex enu = (ObjectVariable_FieldIndex)index;
                switch (enu)
                {
                    case ObjectVariable_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectVariable_FieldIndex.TypeName:
                        this.TypeName = (Exception?)obj;
                        break;
                    case ObjectVariable_FieldIndex.RawUserFlags:
                        this.RawUserFlags = (Exception?)obj;
                        break;
                    case ObjectVariable_FieldIndex.VariableData:
                        this.VariableData = (MaskItem<Exception?, ObjectVariableData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (TypeName != null) return true;
                if (RawUserFlags != null) return true;
                if (VariableData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Name, "Name");
                fg.AppendItem(TypeName, "TypeName");
                fg.AppendItem(RawUserFlags, "RawUserFlags");
                VariableData?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TypeName = this.TypeName.Combine(rhs.TypeName);
                ret.RawUserFlags = this.RawUserFlags.Combine(rhs.RawUserFlags);
                ret.VariableData = this.VariableData.Combine(rhs.VariableData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool TypeName;
            public bool RawUserFlags;
            public ObjectVariableData.TranslationMask? VariableData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.TypeName = defaultOn;
                this.RawUserFlags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((TypeName, null));
                ret.Add((RawUserFlags, null));
                ret.Add((VariableData != null ? VariableData.OnOverall : DefaultOn, VariableData?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object PexWriteTranslator => ObjectVariablePexWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IPexItem.PexWriteTranslator => this.PexWriteTranslator;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((ObjectVariablePexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public static ObjectVariable CreateFromBinary(PexReader reader)
        {
            var ret = new ObjectVariable();
            ((ObjectVariableSetterCommon)((IObjectVariableGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out ObjectVariable item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ObjectVariableSetterCommon)((IObjectVariableGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectVariable GetNew()
        {
            return new ObjectVariable();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectVariable :
        IHasUserFlags,
        ILoquiObjectSetter<IObjectVariable>,
        IObjectVariableGetter
    {
        new String Name { get; set; }
        new String TypeName { get; set; }
        new UInt32 RawUserFlags { get; set; }
        new ObjectVariableData? VariableData { get; set; }
    }

    public partial interface IObjectVariableGetter :
        ILoquiObject,
        IHasUserFlagsGetter,
        ILoquiObject<IObjectVariableGetter>,
        IPexItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ObjectVariable_Registration.Instance;
        String Name { get; }
        String TypeName { get; }
        UInt32 RawUserFlags { get; }
        IObjectVariableDataGetter? VariableData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectVariableMixIn
    {
        public static void Clear(this IObjectVariable item)
        {
            ((ObjectVariableSetterCommon)((IObjectVariableGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectVariable.Mask<bool> GetEqualsMask(
            this IObjectVariableGetter item,
            IObjectVariableGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectVariableGetter item,
            string? name = null,
            ObjectVariable.Mask<bool>? printMask = null)
        {
            return ((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectVariableGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectVariable.Mask<bool>? printMask = null)
        {
            ((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectVariableGetter item,
            IObjectVariableGetter rhs,
            ObjectVariable.TranslationMask? equalsMask = null)
        {
            return ((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectVariable lhs,
            IObjectVariableGetter rhs)
        {
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectVariable lhs,
            IObjectVariableGetter rhs,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectVariable lhs,
            IObjectVariableGetter rhs,
            out ObjectVariable.ErrorMask errorMask,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectVariable.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectVariable lhs,
            IObjectVariableGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectVariable DeepCopy(
            this IObjectVariableGetter item,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            return ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectVariable DeepCopy(
            this IObjectVariableGetter item,
            out ObjectVariable.ErrorMask errorMask,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            return ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectVariable DeepCopy(
            this IObjectVariableGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IObjectVariable item,
            PexReader reader)
        {
            ((ObjectVariableSetterCommon)((IObjectVariableGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum ObjectVariable_FieldIndex
    {
        Name = 0,
        TypeName = 1,
        RawUserFlags = 2,
        VariableData = 3,
    }
    #endregion

    #region Registration
    public partial class ObjectVariable_Registration : ILoquiRegistration
    {
        public static readonly ObjectVariable_Registration Instance = new ObjectVariable_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 9,
            version: 0);

        public const string GUID = "dcbe94f2-dda2-47b9-9057-e30c6c8fac8c";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(ObjectVariable.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectVariable.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectVariable);

        public static readonly Type GetterType = typeof(IObjectVariableGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectVariable);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.ObjectVariable";

        public const string Name = "ObjectVariable";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(ObjectVariablePexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectVariableSetterCommon
    {
        public static readonly ObjectVariableSetterCommon Instance = new ObjectVariableSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectVariable item)
        {
            ClearPartial();
            item.Name = string.Empty;
            item.TypeName = string.Empty;
            item.RawUserFlags = default;
            item.VariableData = null;
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IObjectVariable item,
            PexReader reader)
        {
            item.Name = reader.ReadString();
            item.TypeName = reader.ReadString();
            item.RawUserFlags = reader.ReadUInt32();
            item.VariableData = Mutagen.Bethesda.Skyrim.Pex.ObjectVariableData.CreateFromBinary(reader: reader);
        }
        
        #endregion
        
    }
    public partial class ObjectVariableCommon
    {
        public static readonly ObjectVariableCommon Instance = new ObjectVariableCommon();

        public ObjectVariable.Mask<bool> GetEqualsMask(
            IObjectVariableGetter item,
            IObjectVariableGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectVariable.Mask<bool>(false);
            ((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectVariableGetter item,
            IObjectVariableGetter rhs,
            ObjectVariable.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.TypeName = string.Equals(item.TypeName, rhs.TypeName);
            ret.RawUserFlags = item.RawUserFlags == rhs.RawUserFlags;
            ret.VariableData = EqualsMaskHelper.EqualsHelper(
                item.VariableData,
                rhs.VariableData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IObjectVariableGetter item,
            string? name = null,
            ObjectVariable.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectVariableGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectVariable.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectVariable =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectVariable) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectVariableGetter item,
            FileGeneration fg,
            ObjectVariable.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                fg.AppendItem(item.Name, "Name");
            }
            if (printMask?.TypeName ?? true)
            {
                fg.AppendItem(item.TypeName, "TypeName");
            }
            if (printMask?.RawUserFlags ?? true)
            {
                fg.AppendItem(item.RawUserFlags, "RawUserFlags");
            }
            if ((printMask?.VariableData?.Overall ?? true)
                && item.VariableData.TryGet(out var VariableDataItem))
            {
                VariableDataItem?.ToString(fg, "VariableData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectVariableGetter? lhs,
            IObjectVariableGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if ((crystal?.GetShouldTranslate((int)ObjectVariable_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectVariable_FieldIndex.TypeName) ?? true))
            {
                if (!string.Equals(lhs.TypeName, rhs.TypeName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectVariable_FieldIndex.RawUserFlags) ?? true))
            {
                if (lhs.RawUserFlags != rhs.RawUserFlags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ObjectVariable_FieldIndex.VariableData) ?? true))
            {
                if (!object.Equals(lhs.VariableData, rhs.VariableData)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectVariableGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.TypeName);
            hash.Add(item.RawUserFlags);
            if (item.VariableData.TryGet(out var VariableDataitem))
            {
                hash.Add(VariableDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectVariable.GetNew();
        }
        
    }
    public partial class ObjectVariableSetterTranslationCommon
    {
        public static readonly ObjectVariableSetterTranslationCommon Instance = new ObjectVariableSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectVariable item,
            IObjectVariableGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectVariable_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectVariable_FieldIndex.TypeName) ?? true))
            {
                item.TypeName = rhs.TypeName;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectVariable_FieldIndex.RawUserFlags) ?? true))
            {
                item.RawUserFlags = rhs.RawUserFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectVariable_FieldIndex.VariableData) ?? true))
            {
                errorMask?.PushIndex((int)ObjectVariable_FieldIndex.VariableData);
                try
                {
                    if(rhs.VariableData.TryGet(out var rhsVariableData))
                    {
                        item.VariableData = rhsVariableData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ObjectVariable_FieldIndex.VariableData));
                    }
                    else
                    {
                        item.VariableData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ObjectVariable DeepCopy(
            IObjectVariableGetter item,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            ObjectVariable ret = (ObjectVariable)((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).GetNew();
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectVariable DeepCopy(
            IObjectVariableGetter item,
            out ObjectVariable.ErrorMask errorMask,
            ObjectVariable.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectVariable ret = (ObjectVariable)((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).GetNew();
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectVariable.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectVariable DeepCopy(
            IObjectVariableGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectVariable ret = (ObjectVariable)((ObjectVariableCommon)((IObjectVariableGetter)item).CommonInstance()!).GetNew();
            ((ObjectVariableSetterTranslationCommon)((IObjectVariableGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class ObjectVariable
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectVariable_Registration.Instance;
        public static ObjectVariable_Registration Registration => ObjectVariable_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectVariableCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectVariableSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectVariableSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectVariableGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectVariableGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectVariableGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class ObjectVariablePexWriteTranslation : IPexWriteTranslator
    {
        public readonly static ObjectVariablePexWriteTranslation Instance = new ObjectVariablePexWriteTranslation();

        public void Write(
            PexWriter writer,
            IObjectVariableGetter item)
        {
            writer.Write(item.Name);
            writer.Write(item.TypeName);
            writer.Write(item.RawUserFlags);
            if (item.VariableData.TryGet(out var VariableDataItem))
            {
                ((ObjectVariableDataPexWriteTranslation)((IPexItem)VariableDataItem).PexWriteTranslator).Write(
                    item: VariableDataItem,
                    writer: writer);
            }
        }

        public void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IObjectVariableGetter)item,
                writer: writer);
        }

    }

    public partial class ObjectVariablePexCreateTranslation
    {
        public readonly static ObjectVariablePexCreateTranslation Instance = new ObjectVariablePexCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class ObjectVariablePexTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectVariableGetter item,
            PexWriter writer)
        {
            ((ObjectVariablePexWriteTranslation)item.PexWriteTranslator).Write(
                item: item,
                writer: writer);
        }

    }
    #endregion


}
#endregion

#endregion

