/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class Property :
        IEquatable<IPropertyGetter>,
        ILoquiObjectSetter<Property>,
        IProperty
    {
        #region Ctor
        public Property()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; } = string.Empty;
        #endregion
        #region TypeName
        public String TypeName { get; set; } = string.Empty;
        #endregion
        #region DocString
        public String DocString { get; set; } = string.Empty;
        #endregion
        #region RawUserFlags
        public UInt32 RawUserFlags { get; set; } = default;
        #endregion
        #region Flags
        public PropertyFlags Flags { get; set; } = default;
        #endregion
        #region AutoVarName
        public String? AutoVarName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPropertyGetter.AutoVarName => this.AutoVarName;
        #endregion
        #region ReadHandler
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Function? _ReadHandler;
        public Function? ReadHandler
        {
            get => _ReadHandler;
            set => _ReadHandler = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFunctionGetter? IPropertyGetter.ReadHandler => this.ReadHandler;
        #endregion
        #region WriteHandler
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Function? _WriteHandler;
        public Function? WriteHandler
        {
            get => _WriteHandler;
            set => _WriteHandler = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFunctionGetter? IPropertyGetter.WriteHandler => this.WriteHandler;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPropertyGetter rhs) return false;
            return ((PropertyCommon)((IPropertyGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IPropertyGetter? obj)
        {
            return ((PropertyCommon)((IPropertyGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((PropertyCommon)((IPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.TypeName = initialValue;
                this.DocString = initialValue;
                this.RawUserFlags = initialValue;
                this.Flags = initialValue;
                this.AutoVarName = initialValue;
                this.ReadHandler = new MaskItem<TItem, Function.Mask<TItem>?>(initialValue, new Function.Mask<TItem>(initialValue));
                this.WriteHandler = new MaskItem<TItem, Function.Mask<TItem>?>(initialValue, new Function.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Name,
                TItem TypeName,
                TItem DocString,
                TItem RawUserFlags,
                TItem Flags,
                TItem AutoVarName,
                TItem ReadHandler,
                TItem WriteHandler)
            {
                this.Name = Name;
                this.TypeName = TypeName;
                this.DocString = DocString;
                this.RawUserFlags = RawUserFlags;
                this.Flags = Flags;
                this.AutoVarName = AutoVarName;
                this.ReadHandler = new MaskItem<TItem, Function.Mask<TItem>?>(ReadHandler, new Function.Mask<TItem>(ReadHandler));
                this.WriteHandler = new MaskItem<TItem, Function.Mask<TItem>?>(WriteHandler, new Function.Mask<TItem>(WriteHandler));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem TypeName;
            public TItem DocString;
            public TItem RawUserFlags;
            public TItem Flags;
            public TItem AutoVarName;
            public MaskItem<TItem, Function.Mask<TItem>?>? ReadHandler { get; set; }
            public MaskItem<TItem, Function.Mask<TItem>?>? WriteHandler { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TypeName, rhs.TypeName)) return false;
                if (!object.Equals(this.DocString, rhs.DocString)) return false;
                if (!object.Equals(this.RawUserFlags, rhs.RawUserFlags)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AutoVarName, rhs.AutoVarName)) return false;
                if (!object.Equals(this.ReadHandler, rhs.ReadHandler)) return false;
                if (!object.Equals(this.WriteHandler, rhs.WriteHandler)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.TypeName);
                hash.Add(this.DocString);
                hash.Add(this.RawUserFlags);
                hash.Add(this.Flags);
                hash.Add(this.AutoVarName);
                hash.Add(this.ReadHandler);
                hash.Add(this.WriteHandler);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.TypeName)) return false;
                if (!eval(this.DocString)) return false;
                if (!eval(this.RawUserFlags)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AutoVarName)) return false;
                if (ReadHandler != null)
                {
                    if (!eval(this.ReadHandler.Overall)) return false;
                    if (this.ReadHandler.Specific != null && !this.ReadHandler.Specific.All(eval)) return false;
                }
                if (WriteHandler != null)
                {
                    if (!eval(this.WriteHandler.Overall)) return false;
                    if (this.WriteHandler.Specific != null && !this.WriteHandler.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.TypeName)) return true;
                if (eval(this.DocString)) return true;
                if (eval(this.RawUserFlags)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AutoVarName)) return true;
                if (ReadHandler != null)
                {
                    if (eval(this.ReadHandler.Overall)) return true;
                    if (this.ReadHandler.Specific != null && this.ReadHandler.Specific.Any(eval)) return true;
                }
                if (WriteHandler != null)
                {
                    if (eval(this.WriteHandler.Overall)) return true;
                    if (this.WriteHandler.Specific != null && this.WriteHandler.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Property.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.TypeName = eval(this.TypeName);
                obj.DocString = eval(this.DocString);
                obj.RawUserFlags = eval(this.RawUserFlags);
                obj.Flags = eval(this.Flags);
                obj.AutoVarName = eval(this.AutoVarName);
                obj.ReadHandler = this.ReadHandler == null ? null : new MaskItem<R, Function.Mask<R>?>(eval(this.ReadHandler.Overall), this.ReadHandler.Specific?.Translate(eval));
                obj.WriteHandler = this.WriteHandler == null ? null : new MaskItem<R, Function.Mask<R>?>(eval(this.WriteHandler.Overall), this.WriteHandler.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Property.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Property.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Property.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.TypeName ?? true)
                    {
                        fg.AppendItem(TypeName, "TypeName");
                    }
                    if (printMask?.DocString ?? true)
                    {
                        fg.AppendItem(DocString, "DocString");
                    }
                    if (printMask?.RawUserFlags ?? true)
                    {
                        fg.AppendItem(RawUserFlags, "RawUserFlags");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AutoVarName ?? true)
                    {
                        fg.AppendItem(AutoVarName, "AutoVarName");
                    }
                    if (printMask?.ReadHandler?.Overall ?? true)
                    {
                        ReadHandler?.ToString(fg);
                    }
                    if (printMask?.WriteHandler?.Overall ?? true)
                    {
                        WriteHandler?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? TypeName;
            public Exception? DocString;
            public Exception? RawUserFlags;
            public Exception? Flags;
            public Exception? AutoVarName;
            public MaskItem<Exception?, Function.ErrorMask?>? ReadHandler;
            public MaskItem<Exception?, Function.ErrorMask?>? WriteHandler;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Property_FieldIndex enu = (Property_FieldIndex)index;
                switch (enu)
                {
                    case Property_FieldIndex.Name:
                        return Name;
                    case Property_FieldIndex.TypeName:
                        return TypeName;
                    case Property_FieldIndex.DocString:
                        return DocString;
                    case Property_FieldIndex.RawUserFlags:
                        return RawUserFlags;
                    case Property_FieldIndex.Flags:
                        return Flags;
                    case Property_FieldIndex.AutoVarName:
                        return AutoVarName;
                    case Property_FieldIndex.ReadHandler:
                        return ReadHandler;
                    case Property_FieldIndex.WriteHandler:
                        return WriteHandler;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Property_FieldIndex enu = (Property_FieldIndex)index;
                switch (enu)
                {
                    case Property_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Property_FieldIndex.TypeName:
                        this.TypeName = ex;
                        break;
                    case Property_FieldIndex.DocString:
                        this.DocString = ex;
                        break;
                    case Property_FieldIndex.RawUserFlags:
                        this.RawUserFlags = ex;
                        break;
                    case Property_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Property_FieldIndex.AutoVarName:
                        this.AutoVarName = ex;
                        break;
                    case Property_FieldIndex.ReadHandler:
                        this.ReadHandler = new MaskItem<Exception?, Function.ErrorMask?>(ex, null);
                        break;
                    case Property_FieldIndex.WriteHandler:
                        this.WriteHandler = new MaskItem<Exception?, Function.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Property_FieldIndex enu = (Property_FieldIndex)index;
                switch (enu)
                {
                    case Property_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Property_FieldIndex.TypeName:
                        this.TypeName = (Exception?)obj;
                        break;
                    case Property_FieldIndex.DocString:
                        this.DocString = (Exception?)obj;
                        break;
                    case Property_FieldIndex.RawUserFlags:
                        this.RawUserFlags = (Exception?)obj;
                        break;
                    case Property_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Property_FieldIndex.AutoVarName:
                        this.AutoVarName = (Exception?)obj;
                        break;
                    case Property_FieldIndex.ReadHandler:
                        this.ReadHandler = (MaskItem<Exception?, Function.ErrorMask?>?)obj;
                        break;
                    case Property_FieldIndex.WriteHandler:
                        this.WriteHandler = (MaskItem<Exception?, Function.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (TypeName != null) return true;
                if (DocString != null) return true;
                if (RawUserFlags != null) return true;
                if (Flags != null) return true;
                if (AutoVarName != null) return true;
                if (ReadHandler != null) return true;
                if (WriteHandler != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Name, "Name");
                fg.AppendItem(TypeName, "TypeName");
                fg.AppendItem(DocString, "DocString");
                fg.AppendItem(RawUserFlags, "RawUserFlags");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AutoVarName, "AutoVarName");
                ReadHandler?.ToString(fg);
                WriteHandler?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TypeName = this.TypeName.Combine(rhs.TypeName);
                ret.DocString = this.DocString.Combine(rhs.DocString);
                ret.RawUserFlags = this.RawUserFlags.Combine(rhs.RawUserFlags);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AutoVarName = this.AutoVarName.Combine(rhs.AutoVarName);
                ret.ReadHandler = this.ReadHandler.Combine(rhs.ReadHandler, (l, r) => l.Combine(r));
                ret.WriteHandler = this.WriteHandler.Combine(rhs.WriteHandler, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool TypeName;
            public bool DocString;
            public bool RawUserFlags;
            public bool Flags;
            public bool AutoVarName;
            public Function.TranslationMask? ReadHandler;
            public Function.TranslationMask? WriteHandler;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.TypeName = defaultOn;
                this.DocString = defaultOn;
                this.RawUserFlags = defaultOn;
                this.Flags = defaultOn;
                this.AutoVarName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((TypeName, null));
                ret.Add((DocString, null));
                ret.Add((RawUserFlags, null));
                ret.Add((Flags, null));
                ret.Add((AutoVarName, null));
                ret.Add((ReadHandler != null ? ReadHandler.OnOverall : DefaultOn, ReadHandler?.GetCrystal()));
                ret.Add((WriteHandler != null ? WriteHandler.OnOverall : DefaultOn, WriteHandler?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object PexWriteTranslator => PropertyPexWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IPexItem.PexWriteTranslator => this.PexWriteTranslator;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((PropertyPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public static Property CreateFromBinary(PexReader reader)
        {
            var ret = new Property();
            ((PropertySetterCommon)((IPropertyGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out Property item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PropertySetterCommon)((IPropertyGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Property GetNew()
        {
            return new Property();
        }

    }
    #endregion

    #region Interface
    public partial interface IProperty :
        IHasUserFlags,
        ILoquiObjectSetter<IProperty>,
        IPropertyGetter
    {
        new String Name { get; set; }
        new String TypeName { get; set; }
        new String DocString { get; set; }
        new UInt32 RawUserFlags { get; set; }
        new PropertyFlags Flags { get; set; }
        new String? AutoVarName { get; set; }
        new Function? ReadHandler { get; set; }
        new Function? WriteHandler { get; set; }
    }

    public partial interface IPropertyGetter :
        ILoquiObject,
        IHasUserFlagsGetter,
        ILoquiObject<IPropertyGetter>,
        IPexItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Property_Registration.Instance;
        String Name { get; }
        String TypeName { get; }
        String DocString { get; }
        UInt32 RawUserFlags { get; }
        PropertyFlags Flags { get; }
        String? AutoVarName { get; }
        IFunctionGetter? ReadHandler { get; }
        IFunctionGetter? WriteHandler { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PropertyMixIn
    {
        public static void Clear(this IProperty item)
        {
            ((PropertySetterCommon)((IPropertyGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Property.Mask<bool> GetEqualsMask(
            this IPropertyGetter item,
            IPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPropertyGetter item,
            string? name = null,
            Property.Mask<bool>? printMask = null)
        {
            return ((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            Property.Mask<bool>? printMask = null)
        {
            ((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPropertyGetter item,
            IPropertyGetter rhs,
            Property.TranslationMask? equalsMask = null)
        {
            return ((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IProperty lhs,
            IPropertyGetter rhs)
        {
            ((PropertySetterTranslationCommon)((IPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IProperty lhs,
            IPropertyGetter rhs,
            Property.TranslationMask? copyMask = null)
        {
            ((PropertySetterTranslationCommon)((IPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IProperty lhs,
            IPropertyGetter rhs,
            out Property.ErrorMask errorMask,
            Property.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PropertySetterTranslationCommon)((IPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Property.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IProperty lhs,
            IPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PropertySetterTranslationCommon)((IPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Property DeepCopy(
            this IPropertyGetter item,
            Property.TranslationMask? copyMask = null)
        {
            return ((PropertySetterTranslationCommon)((IPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Property DeepCopy(
            this IPropertyGetter item,
            out Property.ErrorMask errorMask,
            Property.TranslationMask? copyMask = null)
        {
            return ((PropertySetterTranslationCommon)((IPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Property DeepCopy(
            this IPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PropertySetterTranslationCommon)((IPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IProperty item,
            PexReader reader)
        {
            ((PropertySetterCommon)((IPropertyGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum Property_FieldIndex
    {
        Name = 0,
        TypeName = 1,
        DocString = 2,
        RawUserFlags = 3,
        Flags = 4,
        AutoVarName = 5,
        ReadHandler = 6,
        WriteHandler = 7,
    }
    #endregion

    #region Registration
    public partial class Property_Registration : ILoquiRegistration
    {
        public static readonly Property_Registration Instance = new Property_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 11,
            version: 0);

        public const string GUID = "0dfa3f68-af0f-47a9-afbb-2d5d6b4bb994";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Property.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Property.ErrorMask);

        public static readonly Type ClassType = typeof(Property);

        public static readonly Type GetterType = typeof(IPropertyGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IProperty);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.Property";

        public const string Name = "Property";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(PropertyPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PropertySetterCommon
    {
        public static readonly PropertySetterCommon Instance = new PropertySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IProperty item)
        {
            ClearPartial();
            item.Name = string.Empty;
            item.TypeName = string.Empty;
            item.DocString = string.Empty;
            item.RawUserFlags = default;
            item.Flags = default;
            item.AutoVarName = default;
            item.ReadHandler = null;
            item.WriteHandler = null;
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IProperty item,
            PexReader reader)
        {
            item.Name = reader.ReadString();
            item.TypeName = reader.ReadString();
            item.DocString = reader.ReadString();
            item.RawUserFlags = reader.ReadUInt32();
            item.Flags = EnumBinaryTranslation<PropertyFlags, PexReader, PexWriter>.Instance.Parse(
                reader: reader,
                length: 1);
            PropertyPexCreateTranslation.FillBinaryFlagsParseCustom(
                reader: reader,
                item: item);
        }
        
        #endregion
        
    }
    public partial class PropertyCommon
    {
        public static readonly PropertyCommon Instance = new PropertyCommon();

        public Property.Mask<bool> GetEqualsMask(
            IPropertyGetter item,
            IPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Property.Mask<bool>(false);
            ((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPropertyGetter item,
            IPropertyGetter rhs,
            Property.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.TypeName = string.Equals(item.TypeName, rhs.TypeName);
            ret.DocString = string.Equals(item.DocString, rhs.DocString);
            ret.RawUserFlags = item.RawUserFlags == rhs.RawUserFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.AutoVarName = string.Equals(item.AutoVarName, rhs.AutoVarName);
            ret.ReadHandler = EqualsMaskHelper.EqualsHelper(
                item.ReadHandler,
                rhs.ReadHandler,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WriteHandler = EqualsMaskHelper.EqualsHelper(
                item.WriteHandler,
                rhs.WriteHandler,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IPropertyGetter item,
            string? name = null,
            Property.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            Property.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Property =>");
            }
            else
            {
                fg.AppendLine($"{name} (Property) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPropertyGetter item,
            FileGeneration fg,
            Property.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                fg.AppendItem(item.Name, "Name");
            }
            if (printMask?.TypeName ?? true)
            {
                fg.AppendItem(item.TypeName, "TypeName");
            }
            if (printMask?.DocString ?? true)
            {
                fg.AppendItem(item.DocString, "DocString");
            }
            if (printMask?.RawUserFlags ?? true)
            {
                fg.AppendItem(item.RawUserFlags, "RawUserFlags");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.AutoVarName ?? true)
                && item.AutoVarName.TryGet(out var AutoVarNameItem))
            {
                fg.AppendItem(AutoVarNameItem, "AutoVarName");
            }
            if ((printMask?.ReadHandler?.Overall ?? true)
                && item.ReadHandler.TryGet(out var ReadHandlerItem))
            {
                ReadHandlerItem?.ToString(fg, "ReadHandler");
            }
            if ((printMask?.WriteHandler?.Overall ?? true)
                && item.WriteHandler.TryGet(out var WriteHandlerItem))
            {
                WriteHandlerItem?.ToString(fg, "WriteHandler");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPropertyGetter? lhs,
            IPropertyGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.TypeName) ?? true))
            {
                if (!string.Equals(lhs.TypeName, rhs.TypeName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.DocString) ?? true))
            {
                if (!string.Equals(lhs.DocString, rhs.DocString)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.RawUserFlags) ?? true))
            {
                if (lhs.RawUserFlags != rhs.RawUserFlags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.AutoVarName) ?? true))
            {
                if (!string.Equals(lhs.AutoVarName, rhs.AutoVarName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.ReadHandler) ?? true))
            {
                if (!object.Equals(lhs.ReadHandler, rhs.ReadHandler)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Property_FieldIndex.WriteHandler) ?? true))
            {
                if (!object.Equals(lhs.WriteHandler, rhs.WriteHandler)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPropertyGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.TypeName);
            hash.Add(item.DocString);
            hash.Add(item.RawUserFlags);
            hash.Add(item.Flags);
            if (item.AutoVarName.TryGet(out var AutoVarNameitem))
            {
                hash.Add(AutoVarNameitem);
            }
            if (item.ReadHandler.TryGet(out var ReadHandleritem))
            {
                hash.Add(ReadHandleritem);
            }
            if (item.WriteHandler.TryGet(out var WriteHandleritem))
            {
                hash.Add(WriteHandleritem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Property.GetNew();
        }
        
    }
    public partial class PropertySetterTranslationCommon
    {
        public static readonly PropertySetterTranslationCommon Instance = new PropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IProperty item,
            IPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.TypeName) ?? true))
            {
                item.TypeName = rhs.TypeName;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.DocString) ?? true))
            {
                item.DocString = rhs.DocString;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.RawUserFlags) ?? true))
            {
                item.RawUserFlags = rhs.RawUserFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.AutoVarName) ?? true))
            {
                item.AutoVarName = rhs.AutoVarName;
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.ReadHandler) ?? true))
            {
                errorMask?.PushIndex((int)Property_FieldIndex.ReadHandler);
                try
                {
                    if(rhs.ReadHandler.TryGet(out var rhsReadHandler))
                    {
                        item.ReadHandler = rhsReadHandler.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Property_FieldIndex.ReadHandler));
                    }
                    else
                    {
                        item.ReadHandler = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Property_FieldIndex.WriteHandler) ?? true))
            {
                errorMask?.PushIndex((int)Property_FieldIndex.WriteHandler);
                try
                {
                    if(rhs.WriteHandler.TryGet(out var rhsWriteHandler))
                    {
                        item.WriteHandler = rhsWriteHandler.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Property_FieldIndex.WriteHandler));
                    }
                    else
                    {
                        item.WriteHandler = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Property DeepCopy(
            IPropertyGetter item,
            Property.TranslationMask? copyMask = null)
        {
            Property ret = (Property)((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).GetNew();
            ((PropertySetterTranslationCommon)((IPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Property DeepCopy(
            IPropertyGetter item,
            out Property.ErrorMask errorMask,
            Property.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Property ret = (Property)((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).GetNew();
            ((PropertySetterTranslationCommon)((IPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Property.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Property DeepCopy(
            IPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Property ret = (Property)((PropertyCommon)((IPropertyGetter)item).CommonInstance()!).GetNew();
            ((PropertySetterTranslationCommon)((IPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class Property
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Property_Registration.Instance;
        public static Property_Registration Registration => Property_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PropertyCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PropertySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PropertySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPropertyGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPropertyGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPropertyGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class PropertyPexWriteTranslation : IPexWriteTranslator
    {
        public readonly static PropertyPexWriteTranslation Instance = new PropertyPexWriteTranslation();

        public static partial void WriteBinaryFlagsParseCustom(
            PexWriter writer,
            IPropertyGetter item);

        public static void WriteBinaryFlagsParse(
            PexWriter writer,
            IPropertyGetter item)
        {
            WriteBinaryFlagsParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            PexWriter writer,
            IPropertyGetter item)
        {
            writer.Write(item.Name);
            writer.Write(item.TypeName);
            writer.Write(item.DocString);
            writer.Write(item.RawUserFlags);
            EnumBinaryTranslation<PropertyFlags, PexReader, PexWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 1);
            PropertyPexWriteTranslation.WriteBinaryFlagsParse(
                writer: writer,
                item: item);
        }

        public void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IPropertyGetter)item,
                writer: writer);
        }

    }

    public partial class PropertyPexCreateTranslation
    {
        public readonly static PropertyPexCreateTranslation Instance = new PropertyPexCreateTranslation();

        public static partial void FillBinaryFlagsParseCustom(
            PexReader reader,
            IProperty item);

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class PropertyPexTranslationMixIn
    {
        public static void WriteToBinary(
            this IPropertyGetter item,
            PexWriter writer)
        {
            ((PropertyPexWriteTranslation)item.PexWriteTranslator).Write(
                item: item,
                writer: writer);
        }

    }
    #endregion


}
#endregion

#endregion

