/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class GetArrayLengthInstruction :
        Instruction,
        IEquatable<IGetArrayLengthInstructionGetter>,
        IGetArrayLengthInstruction,
        ILoquiObjectSetter<GetArrayLengthInstruction>
    {
        #region Ctor
        public GetArrayLengthInstruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Identifier
        public StringVariable Identifier { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter IGetArrayLengthInstructionGetter.Identifier => Identifier;
        #endregion
        #region String
        public StringVariable String { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter IGetArrayLengthInstructionGetter.String => String;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GetArrayLengthInstructionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGetArrayLengthInstructionGetter rhs) return false;
            return ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IGetArrayLengthInstructionGetter? obj)
        {
            return ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Instruction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Identifier = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
                this.String = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Identifier,
                TItem String)
            : base()
            {
                this.Identifier = new MaskItem<TItem, StringVariable.Mask<TItem>?>(Identifier, new StringVariable.Mask<TItem>(Identifier));
                this.String = new MaskItem<TItem, StringVariable.Mask<TItem>?>(String, new StringVariable.Mask<TItem>(String));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? Identifier { get; set; }
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? String { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Identifier, rhs.Identifier)) return false;
                if (!object.Equals(this.String, rhs.String)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Identifier);
                hash.Add(this.String);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Identifier != null)
                {
                    if (!eval(this.Identifier.Overall)) return false;
                    if (this.Identifier.Specific != null && !this.Identifier.Specific.All(eval)) return false;
                }
                if (String != null)
                {
                    if (!eval(this.String.Overall)) return false;
                    if (this.String.Specific != null && !this.String.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Identifier != null)
                {
                    if (eval(this.Identifier.Overall)) return true;
                    if (this.Identifier.Specific != null && this.Identifier.Specific.Any(eval)) return true;
                }
                if (String != null)
                {
                    if (eval(this.String.Overall)) return true;
                    if (this.String.Specific != null && this.String.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GetArrayLengthInstruction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Identifier = this.Identifier == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.Identifier.Overall), this.Identifier.Specific?.Translate(eval));
                obj.String = this.String == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.String.Overall), this.String.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(GetArrayLengthInstruction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, GetArrayLengthInstruction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(GetArrayLengthInstruction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Identifier?.Overall ?? true)
                    {
                        Identifier?.ToString(fg);
                    }
                    if (printMask?.String?.Overall ?? true)
                    {
                        String?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Instruction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, StringVariable.ErrorMask?>? Identifier;
            public MaskItem<Exception?, StringVariable.ErrorMask?>? String;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GetArrayLengthInstruction_FieldIndex enu = (GetArrayLengthInstruction_FieldIndex)index;
                switch (enu)
                {
                    case GetArrayLengthInstruction_FieldIndex.Identifier:
                        return Identifier;
                    case GetArrayLengthInstruction_FieldIndex.String:
                        return String;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GetArrayLengthInstruction_FieldIndex enu = (GetArrayLengthInstruction_FieldIndex)index;
                switch (enu)
                {
                    case GetArrayLengthInstruction_FieldIndex.Identifier:
                        this.Identifier = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    case GetArrayLengthInstruction_FieldIndex.String:
                        this.String = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GetArrayLengthInstruction_FieldIndex enu = (GetArrayLengthInstruction_FieldIndex)index;
                switch (enu)
                {
                    case GetArrayLengthInstruction_FieldIndex.Identifier:
                        this.Identifier = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    case GetArrayLengthInstruction_FieldIndex.String:
                        this.String = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Identifier != null) return true;
                if (String != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Identifier?.ToString(fg);
                String?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Identifier = this.Identifier.Combine(rhs.Identifier, (l, r) => l.Combine(r));
                ret.String = this.String.Combine(rhs.String, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Instruction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public StringVariable.TranslationMask? Identifier;
            public StringVariable.TranslationMask? String;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Identifier != null ? Identifier.OnOverall : DefaultOn, Identifier?.GetCrystal()));
                ret.Add((String != null ? String.OnOverall : DefaultOn, String?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object PexWriteTranslator => GetArrayLengthInstructionPexWriteTranslation.Instance;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((GetArrayLengthInstructionPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public new static GetArrayLengthInstruction CreateFromBinary(PexReader reader)
        {
            var ret = new GetArrayLengthInstruction();
            ((GetArrayLengthInstructionSetterCommon)((IGetArrayLengthInstructionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out GetArrayLengthInstruction item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((GetArrayLengthInstructionSetterCommon)((IGetArrayLengthInstructionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GetArrayLengthInstruction GetNew()
        {
            return new GetArrayLengthInstruction();
        }

    }
    #endregion

    #region Interface
    public partial interface IGetArrayLengthInstruction :
        IGetArrayLengthInstructionGetter,
        IInstruction,
        ILoquiObjectSetter<IGetArrayLengthInstruction>
    {
        new StringVariable Identifier { get; set; }
        new StringVariable String { get; set; }
    }

    public partial interface IGetArrayLengthInstructionGetter :
        IInstructionGetter,
        ILoquiObject<IGetArrayLengthInstructionGetter>,
        IPexItem
    {
        static new ILoquiRegistration Registration => GetArrayLengthInstruction_Registration.Instance;
        IStringVariableGetter Identifier { get; }
        IStringVariableGetter String { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GetArrayLengthInstructionMixIn
    {
        public static void Clear(this IGetArrayLengthInstruction item)
        {
            ((GetArrayLengthInstructionSetterCommon)((IGetArrayLengthInstructionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GetArrayLengthInstruction.Mask<bool> GetEqualsMask(
            this IGetArrayLengthInstructionGetter item,
            IGetArrayLengthInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGetArrayLengthInstructionGetter item,
            string? name = null,
            GetArrayLengthInstruction.Mask<bool>? printMask = null)
        {
            return ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGetArrayLengthInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            GetArrayLengthInstruction.Mask<bool>? printMask = null)
        {
            ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGetArrayLengthInstructionGetter item,
            IGetArrayLengthInstructionGetter rhs,
            GetArrayLengthInstruction.TranslationMask? equalsMask = null)
        {
            return ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGetArrayLengthInstruction lhs,
            IGetArrayLengthInstructionGetter rhs,
            out GetArrayLengthInstruction.ErrorMask errorMask,
            GetArrayLengthInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GetArrayLengthInstruction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGetArrayLengthInstruction lhs,
            IGetArrayLengthInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GetArrayLengthInstruction DeepCopy(
            this IGetArrayLengthInstructionGetter item,
            GetArrayLengthInstruction.TranslationMask? copyMask = null)
        {
            return ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GetArrayLengthInstruction DeepCopy(
            this IGetArrayLengthInstructionGetter item,
            out GetArrayLengthInstruction.ErrorMask errorMask,
            GetArrayLengthInstruction.TranslationMask? copyMask = null)
        {
            return ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GetArrayLengthInstruction DeepCopy(
            this IGetArrayLengthInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IGetArrayLengthInstruction item,
            PexReader reader)
        {
            ((GetArrayLengthInstructionSetterCommon)((IGetArrayLengthInstructionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum GetArrayLengthInstruction_FieldIndex
    {
        Identifier = 0,
        String = 1,
    }
    #endregion

    #region Registration
    public partial class GetArrayLengthInstruction_Registration : ILoquiRegistration
    {
        public static readonly GetArrayLengthInstruction_Registration Instance = new GetArrayLengthInstruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 42,
            version: 0);

        public const string GUID = "044908ea-b0da-4658-a372-51e32948a105";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(GetArrayLengthInstruction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GetArrayLengthInstruction.ErrorMask);

        public static readonly Type ClassType = typeof(GetArrayLengthInstruction);

        public static readonly Type GetterType = typeof(IGetArrayLengthInstructionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGetArrayLengthInstruction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.GetArrayLengthInstruction";

        public const string Name = "GetArrayLengthInstruction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(GetArrayLengthInstructionPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class GetArrayLengthInstructionSetterCommon : InstructionSetterCommon
    {
        public new static readonly GetArrayLengthInstructionSetterCommon Instance = new GetArrayLengthInstructionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGetArrayLengthInstruction item)
        {
            ClearPartial();
            item.Identifier.Clear();
            item.String.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IInstruction item)
        {
            Clear(item: (IGetArrayLengthInstruction)item);
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IGetArrayLengthInstruction item,
            PexReader reader)
        {
            item.Identifier = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
            item.String = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
        }
        
        public override void CopyInFromBinary(
            IInstruction item,
            PexReader reader)
        {
            CopyInFromBinary(
                item: (GetArrayLengthInstruction)item,
                reader: reader);
        }
        
        #endregion
        
    }
    public partial class GetArrayLengthInstructionCommon : InstructionCommon
    {
        public new static readonly GetArrayLengthInstructionCommon Instance = new GetArrayLengthInstructionCommon();

        public GetArrayLengthInstruction.Mask<bool> GetEqualsMask(
            IGetArrayLengthInstructionGetter item,
            IGetArrayLengthInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GetArrayLengthInstruction.Mask<bool>(false);
            ((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGetArrayLengthInstructionGetter item,
            IGetArrayLengthInstructionGetter rhs,
            GetArrayLengthInstruction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Identifier = MaskItemExt.Factory(item.Identifier.GetEqualsMask(rhs.Identifier, include), include);
            ret.String = MaskItemExt.Factory(item.String.GetEqualsMask(rhs.String, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IGetArrayLengthInstructionGetter item,
            string? name = null,
            GetArrayLengthInstruction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGetArrayLengthInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            GetArrayLengthInstruction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GetArrayLengthInstruction =>");
            }
            else
            {
                fg.AppendLine($"{name} (GetArrayLengthInstruction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGetArrayLengthInstructionGetter item,
            FileGeneration fg,
            GetArrayLengthInstruction.Mask<bool>? printMask = null)
        {
            InstructionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Identifier?.Overall ?? true)
            {
                item.Identifier?.ToString(fg, "Identifier");
            }
            if (printMask?.String?.Overall ?? true)
            {
                item.String?.ToString(fg, "String");
            }
        }
        
        public static GetArrayLengthInstruction_FieldIndex ConvertFieldIndex(Instruction_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGetArrayLengthInstructionGetter? lhs,
            IGetArrayLengthInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IInstructionGetter)lhs, (IInstructionGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.Identifier) ?? true))
            {
                if (!object.Equals(lhs.Identifier, rhs.Identifier)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.String) ?? true))
            {
                if (!object.Equals(lhs.String, rhs.String)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IInstructionGetter? lhs,
            IInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IGetArrayLengthInstructionGetter?)lhs,
                rhs: rhs as IGetArrayLengthInstructionGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IGetArrayLengthInstructionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Identifier);
            hash.Add(item.String);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IInstructionGetter item)
        {
            return GetHashCode(item: (IGetArrayLengthInstructionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GetArrayLengthInstruction.GetNew();
        }
        
    }
    public partial class GetArrayLengthInstructionSetterTranslationCommon : InstructionSetterTranslationCommon
    {
        public new static readonly GetArrayLengthInstructionSetterTranslationCommon Instance = new GetArrayLengthInstructionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGetArrayLengthInstruction item,
            IGetArrayLengthInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IInstruction)item,
                (IInstructionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.Identifier) ?? true))
            {
                errorMask?.PushIndex((int)GetArrayLengthInstruction_FieldIndex.Identifier);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.Identifier) ?? true))
                    {
                        item.Identifier = rhs.Identifier.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)GetArrayLengthInstruction_FieldIndex.Identifier),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.String) ?? true))
            {
                errorMask?.PushIndex((int)GetArrayLengthInstruction_FieldIndex.String);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)GetArrayLengthInstruction_FieldIndex.String) ?? true))
                    {
                        item.String = rhs.String.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)GetArrayLengthInstruction_FieldIndex.String),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IInstruction item,
            IInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGetArrayLengthInstruction)item,
                rhs: (IGetArrayLengthInstructionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GetArrayLengthInstruction DeepCopy(
            IGetArrayLengthInstructionGetter item,
            GetArrayLengthInstruction.TranslationMask? copyMask = null)
        {
            GetArrayLengthInstruction ret = (GetArrayLengthInstruction)((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).GetNew();
            ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GetArrayLengthInstruction DeepCopy(
            IGetArrayLengthInstructionGetter item,
            out GetArrayLengthInstruction.ErrorMask errorMask,
            GetArrayLengthInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GetArrayLengthInstruction ret = (GetArrayLengthInstruction)((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).GetNew();
            ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GetArrayLengthInstruction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GetArrayLengthInstruction DeepCopy(
            IGetArrayLengthInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GetArrayLengthInstruction ret = (GetArrayLengthInstruction)((GetArrayLengthInstructionCommon)((IGetArrayLengthInstructionGetter)item).CommonInstance()!).GetNew();
            ((GetArrayLengthInstructionSetterTranslationCommon)((IGetArrayLengthInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class GetArrayLengthInstruction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetArrayLengthInstruction_Registration.Instance;
        public new static GetArrayLengthInstruction_Registration Registration => GetArrayLengthInstruction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetArrayLengthInstructionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GetArrayLengthInstructionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetArrayLengthInstructionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class GetArrayLengthInstructionPexWriteTranslation :
        InstructionPexWriteTranslation,
        IPexWriteTranslator
    {
        public new readonly static GetArrayLengthInstructionPexWriteTranslation Instance = new GetArrayLengthInstructionPexWriteTranslation();

        public void Write(
            PexWriter writer,
            IGetArrayLengthInstructionGetter item)
        {
            InstructionPexWriteTranslation.Instance.Write(
                item: item,
                writer: writer);
            var IdentifierItem = item.Identifier;
            ((StringVariablePexWriteTranslation)((IPexItem)IdentifierItem).PexWriteTranslator).Write(
                item: IdentifierItem,
                writer: writer);
            var StringItem = item.String;
            ((StringVariablePexWriteTranslation)((IPexItem)StringItem).PexWriteTranslator).Write(
                item: StringItem,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IGetArrayLengthInstructionGetter)item,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            IInstructionGetter item)
        {
            Write(
                item: (IGetArrayLengthInstructionGetter)item,
                writer: writer);
        }

    }

    public partial class GetArrayLengthInstructionPexCreateTranslation : InstructionPexCreateTranslation
    {
        public new readonly static GetArrayLengthInstructionPexCreateTranslation Instance = new GetArrayLengthInstructionPexCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class GetArrayLengthInstructionPexTranslationMixIn
    {
    }
    #endregion


}
#endregion

#endregion

