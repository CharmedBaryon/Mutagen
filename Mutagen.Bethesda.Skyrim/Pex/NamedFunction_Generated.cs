/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class NamedFunction :
        IEquatable<INamedFunctionGetter>,
        ILoquiObjectSetter<NamedFunction>,
        INamedFunction
    {
        #region Ctor
        public NamedFunction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FunctionName
        public String FunctionName { get; set; } = string.Empty;
        #endregion
        #region Function
        public Function Function { get; set; } = new Function();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFunctionGetter INamedFunctionGetter.Function => Function;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NamedFunctionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INamedFunctionGetter rhs) return false;
            return ((NamedFunctionCommon)((INamedFunctionGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(INamedFunctionGetter? obj)
        {
            return ((NamedFunctionCommon)((INamedFunctionGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((NamedFunctionCommon)((INamedFunctionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FunctionName = initialValue;
                this.Function = new MaskItem<TItem, Function.Mask<TItem>?>(initialValue, new Function.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem FunctionName,
                TItem Function)
            {
                this.FunctionName = FunctionName;
                this.Function = new MaskItem<TItem, Function.Mask<TItem>?>(Function, new Function.Mask<TItem>(Function));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FunctionName;
            public MaskItem<TItem, Function.Mask<TItem>?>? Function { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FunctionName, rhs.FunctionName)) return false;
                if (!object.Equals(this.Function, rhs.Function)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FunctionName);
                hash.Add(this.Function);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FunctionName)) return false;
                if (Function != null)
                {
                    if (!eval(this.Function.Overall)) return false;
                    if (this.Function.Specific != null && !this.Function.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FunctionName)) return true;
                if (Function != null)
                {
                    if (eval(this.Function.Overall)) return true;
                    if (this.Function.Specific != null && this.Function.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NamedFunction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FunctionName = eval(this.FunctionName);
                obj.Function = this.Function == null ? null : new MaskItem<R, Function.Mask<R>?>(eval(this.Function.Overall), this.Function.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NamedFunction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NamedFunction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NamedFunction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.FunctionName ?? true)
                    {
                        fg.AppendItem(FunctionName, "FunctionName");
                    }
                    if (printMask?.Function?.Overall ?? true)
                    {
                        Function?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FunctionName;
            public MaskItem<Exception?, Function.ErrorMask?>? Function;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NamedFunction_FieldIndex enu = (NamedFunction_FieldIndex)index;
                switch (enu)
                {
                    case NamedFunction_FieldIndex.FunctionName:
                        return FunctionName;
                    case NamedFunction_FieldIndex.Function:
                        return Function;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NamedFunction_FieldIndex enu = (NamedFunction_FieldIndex)index;
                switch (enu)
                {
                    case NamedFunction_FieldIndex.FunctionName:
                        this.FunctionName = ex;
                        break;
                    case NamedFunction_FieldIndex.Function:
                        this.Function = new MaskItem<Exception?, Function.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NamedFunction_FieldIndex enu = (NamedFunction_FieldIndex)index;
                switch (enu)
                {
                    case NamedFunction_FieldIndex.FunctionName:
                        this.FunctionName = (Exception?)obj;
                        break;
                    case NamedFunction_FieldIndex.Function:
                        this.Function = (MaskItem<Exception?, Function.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FunctionName != null) return true;
                if (Function != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(FunctionName, "FunctionName");
                Function?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FunctionName = this.FunctionName.Combine(rhs.FunctionName);
                ret.Function = this.Function.Combine(rhs.Function, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FunctionName;
            public Function.TranslationMask? Function;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FunctionName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FunctionName, null));
                ret.Add((Function != null ? Function.OnOverall : DefaultOn, Function?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object PexWriteTranslator => NamedFunctionPexWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IPexItem.PexWriteTranslator => this.PexWriteTranslator;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((NamedFunctionPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public static NamedFunction CreateFromBinary(PexReader reader)
        {
            var ret = new NamedFunction();
            ((NamedFunctionSetterCommon)((INamedFunctionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out NamedFunction item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NamedFunctionSetterCommon)((INamedFunctionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NamedFunction GetNew()
        {
            return new NamedFunction();
        }

    }
    #endregion

    #region Interface
    public partial interface INamedFunction :
        ILoquiObjectSetter<INamedFunction>,
        INamedFunctionGetter
    {
        new String FunctionName { get; set; }
        new Function Function { get; set; }
    }

    public partial interface INamedFunctionGetter :
        ILoquiObject,
        ILoquiObject<INamedFunctionGetter>,
        IPexItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => NamedFunction_Registration.Instance;
        String FunctionName { get; }
        IFunctionGetter Function { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NamedFunctionMixIn
    {
        public static void Clear(this INamedFunction item)
        {
            ((NamedFunctionSetterCommon)((INamedFunctionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NamedFunction.Mask<bool> GetEqualsMask(
            this INamedFunctionGetter item,
            INamedFunctionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INamedFunctionGetter item,
            string? name = null,
            NamedFunction.Mask<bool>? printMask = null)
        {
            return ((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INamedFunctionGetter item,
            FileGeneration fg,
            string? name = null,
            NamedFunction.Mask<bool>? printMask = null)
        {
            ((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INamedFunctionGetter item,
            INamedFunctionGetter rhs,
            NamedFunction.TranslationMask? equalsMask = null)
        {
            return ((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INamedFunction lhs,
            INamedFunctionGetter rhs)
        {
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INamedFunction lhs,
            INamedFunctionGetter rhs,
            NamedFunction.TranslationMask? copyMask = null)
        {
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INamedFunction lhs,
            INamedFunctionGetter rhs,
            out NamedFunction.ErrorMask errorMask,
            NamedFunction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NamedFunction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INamedFunction lhs,
            INamedFunctionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NamedFunction DeepCopy(
            this INamedFunctionGetter item,
            NamedFunction.TranslationMask? copyMask = null)
        {
            return ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NamedFunction DeepCopy(
            this INamedFunctionGetter item,
            out NamedFunction.ErrorMask errorMask,
            NamedFunction.TranslationMask? copyMask = null)
        {
            return ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NamedFunction DeepCopy(
            this INamedFunctionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this INamedFunction item,
            PexReader reader)
        {
            ((NamedFunctionSetterCommon)((INamedFunctionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum NamedFunction_FieldIndex
    {
        FunctionName = 0,
        Function = 1,
    }
    #endregion

    #region Registration
    public partial class NamedFunction_Registration : ILoquiRegistration
    {
        public static readonly NamedFunction_Registration Instance = new NamedFunction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 13,
            version: 0);

        public const string GUID = "6d5e808d-a83c-475c-a7ae-c1c4d3aeff6a";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(NamedFunction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NamedFunction.ErrorMask);

        public static readonly Type ClassType = typeof(NamedFunction);

        public static readonly Type GetterType = typeof(INamedFunctionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INamedFunction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.NamedFunction";

        public const string Name = "NamedFunction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(NamedFunctionPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NamedFunctionSetterCommon
    {
        public static readonly NamedFunctionSetterCommon Instance = new NamedFunctionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INamedFunction item)
        {
            ClearPartial();
            item.FunctionName = string.Empty;
            item.Function.Clear();
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            INamedFunction item,
            PexReader reader)
        {
            item.FunctionName = reader.ReadString();
            item.Function = Mutagen.Bethesda.Skyrim.Pex.Function.CreateFromBinary(reader: reader);
        }
        
        #endregion
        
    }
    public partial class NamedFunctionCommon
    {
        public static readonly NamedFunctionCommon Instance = new NamedFunctionCommon();

        public NamedFunction.Mask<bool> GetEqualsMask(
            INamedFunctionGetter item,
            INamedFunctionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NamedFunction.Mask<bool>(false);
            ((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INamedFunctionGetter item,
            INamedFunctionGetter rhs,
            NamedFunction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.FunctionName = string.Equals(item.FunctionName, rhs.FunctionName);
            ret.Function = MaskItemExt.Factory(item.Function.GetEqualsMask(rhs.Function, include), include);
        }
        
        public string ToString(
            INamedFunctionGetter item,
            string? name = null,
            NamedFunction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INamedFunctionGetter item,
            FileGeneration fg,
            string? name = null,
            NamedFunction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NamedFunction =>");
            }
            else
            {
                fg.AppendLine($"{name} (NamedFunction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INamedFunctionGetter item,
            FileGeneration fg,
            NamedFunction.Mask<bool>? printMask = null)
        {
            if (printMask?.FunctionName ?? true)
            {
                fg.AppendItem(item.FunctionName, "FunctionName");
            }
            if (printMask?.Function?.Overall ?? true)
            {
                item.Function?.ToString(fg, "Function");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INamedFunctionGetter? lhs,
            INamedFunctionGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if ((crystal?.GetShouldTranslate((int)NamedFunction_FieldIndex.FunctionName) ?? true))
            {
                if (!string.Equals(lhs.FunctionName, rhs.FunctionName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)NamedFunction_FieldIndex.Function) ?? true))
            {
                if (!object.Equals(lhs.Function, rhs.Function)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INamedFunctionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FunctionName);
            hash.Add(item.Function);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NamedFunction.GetNew();
        }
        
    }
    public partial class NamedFunctionSetterTranslationCommon
    {
        public static readonly NamedFunctionSetterTranslationCommon Instance = new NamedFunctionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INamedFunction item,
            INamedFunctionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NamedFunction_FieldIndex.FunctionName) ?? true))
            {
                item.FunctionName = rhs.FunctionName;
            }
            if ((copyMask?.GetShouldTranslate((int)NamedFunction_FieldIndex.Function) ?? true))
            {
                errorMask?.PushIndex((int)NamedFunction_FieldIndex.Function);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NamedFunction_FieldIndex.Function) ?? true))
                    {
                        item.Function = rhs.Function.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NamedFunction_FieldIndex.Function),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NamedFunction DeepCopy(
            INamedFunctionGetter item,
            NamedFunction.TranslationMask? copyMask = null)
        {
            NamedFunction ret = (NamedFunction)((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).GetNew();
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NamedFunction DeepCopy(
            INamedFunctionGetter item,
            out NamedFunction.ErrorMask errorMask,
            NamedFunction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NamedFunction ret = (NamedFunction)((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).GetNew();
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NamedFunction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NamedFunction DeepCopy(
            INamedFunctionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NamedFunction ret = (NamedFunction)((NamedFunctionCommon)((INamedFunctionGetter)item).CommonInstance()!).GetNew();
            ((NamedFunctionSetterTranslationCommon)((INamedFunctionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class NamedFunction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NamedFunction_Registration.Instance;
        public static NamedFunction_Registration Registration => NamedFunction_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NamedFunctionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NamedFunctionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NamedFunctionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INamedFunctionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INamedFunctionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INamedFunctionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class NamedFunctionPexWriteTranslation : IPexWriteTranslator
    {
        public readonly static NamedFunctionPexWriteTranslation Instance = new NamedFunctionPexWriteTranslation();

        public void Write(
            PexWriter writer,
            INamedFunctionGetter item)
        {
            writer.Write(item.FunctionName);
            var FunctionItem = item.Function;
            ((FunctionPexWriteTranslation)((IPexItem)FunctionItem).PexWriteTranslator).Write(
                item: FunctionItem,
                writer: writer);
        }

        public void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (INamedFunctionGetter)item,
                writer: writer);
        }

    }

    public partial class NamedFunctionPexCreateTranslation
    {
        public readonly static NamedFunctionPexCreateTranslation Instance = new NamedFunctionPexCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class NamedFunctionPexTranslationMixIn
    {
        public static void WriteToBinary(
            this INamedFunctionGetter item,
            PexWriter writer)
        {
            ((NamedFunctionPexWriteTranslation)item.PexWriteTranslator).Write(
                item: item,
                writer: writer);
        }

    }
    #endregion


}
#endregion

#endregion

