/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class CallParentInstruction :
        Instruction,
        ICallParentInstruction,
        IEquatable<ICallParentInstructionGetter>,
        ILoquiObjectSetter<CallParentInstruction>
    {
        #region Ctor
        public CallParentInstruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region String1
        public StringVariable String1 { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter ICallParentInstructionGetter.String1 => String1;
        #endregion
        #region String2
        public StringVariable String2 { get; set; } = new StringVariable();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStringVariableGetter ICallParentInstructionGetter.String2 => String2;
        #endregion
        #region ExtraVariables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AVariable> _ExtraVariables = new ExtendedList<AVariable>();
        public ExtendedList<AVariable> ExtraVariables
        {
            get => this._ExtraVariables;
            init => this._ExtraVariables = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAVariableGetter> ICallParentInstructionGetter.ExtraVariables => _ExtraVariables;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CallParentInstructionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICallParentInstructionGetter rhs) return false;
            return ((CallParentInstructionCommon)((ICallParentInstructionGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(ICallParentInstructionGetter? obj)
        {
            return ((CallParentInstructionCommon)((ICallParentInstructionGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((CallParentInstructionCommon)((ICallParentInstructionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Instruction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.String1 = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
                this.String2 = new MaskItem<TItem, StringVariable.Mask<TItem>?>(initialValue, new StringVariable.Mask<TItem>(initialValue));
                this.ExtraVariables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AVariable.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AVariable.Mask<TItem>?>>());
            }

            public Mask(
                TItem String1,
                TItem String2,
                TItem ExtraVariables)
            : base()
            {
                this.String1 = new MaskItem<TItem, StringVariable.Mask<TItem>?>(String1, new StringVariable.Mask<TItem>(String1));
                this.String2 = new MaskItem<TItem, StringVariable.Mask<TItem>?>(String2, new StringVariable.Mask<TItem>(String2));
                this.ExtraVariables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AVariable.Mask<TItem>?>>?>(ExtraVariables, Enumerable.Empty<MaskItemIndexed<TItem, AVariable.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? String1 { get; set; }
            public MaskItem<TItem, StringVariable.Mask<TItem>?>? String2 { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AVariable.Mask<TItem>?>>?>? ExtraVariables;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.String1, rhs.String1)) return false;
                if (!object.Equals(this.String2, rhs.String2)) return false;
                if (!object.Equals(this.ExtraVariables, rhs.ExtraVariables)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.String1);
                hash.Add(this.String2);
                hash.Add(this.ExtraVariables);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (String1 != null)
                {
                    if (!eval(this.String1.Overall)) return false;
                    if (this.String1.Specific != null && !this.String1.Specific.All(eval)) return false;
                }
                if (String2 != null)
                {
                    if (!eval(this.String2.Overall)) return false;
                    if (this.String2.Specific != null && !this.String2.Specific.All(eval)) return false;
                }
                if (this.ExtraVariables != null)
                {
                    if (!eval(this.ExtraVariables.Overall)) return false;
                    if (this.ExtraVariables.Specific != null)
                    {
                        foreach (var item in this.ExtraVariables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (String1 != null)
                {
                    if (eval(this.String1.Overall)) return true;
                    if (this.String1.Specific != null && this.String1.Specific.Any(eval)) return true;
                }
                if (String2 != null)
                {
                    if (eval(this.String2.Overall)) return true;
                    if (this.String2.Specific != null && this.String2.Specific.Any(eval)) return true;
                }
                if (this.ExtraVariables != null)
                {
                    if (eval(this.ExtraVariables.Overall)) return true;
                    if (this.ExtraVariables.Specific != null)
                    {
                        foreach (var item in this.ExtraVariables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CallParentInstruction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.String1 = this.String1 == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.String1.Overall), this.String1.Specific?.Translate(eval));
                obj.String2 = this.String2 == null ? null : new MaskItem<R, StringVariable.Mask<R>?>(eval(this.String2.Overall), this.String2.Specific?.Translate(eval));
                if (ExtraVariables != null)
                {
                    obj.ExtraVariables = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AVariable.Mask<R>?>>?>(eval(this.ExtraVariables.Overall), Enumerable.Empty<MaskItemIndexed<R, AVariable.Mask<R>?>>());
                    if (ExtraVariables.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AVariable.Mask<R>?>>();
                        obj.ExtraVariables.Specific = l;
                        foreach (var item in ExtraVariables.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, AVariable.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, AVariable.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CallParentInstruction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CallParentInstruction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CallParentInstruction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.String1?.Overall ?? true)
                    {
                        String1?.ToString(fg);
                    }
                    if (printMask?.String2?.Overall ?? true)
                    {
                        String2?.ToString(fg);
                    }
                    if ((printMask?.ExtraVariables?.Overall ?? true)
                        && ExtraVariables.TryGet(out var ExtraVariablesItem))
                    {
                        fg.AppendLine("ExtraVariables =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ExtraVariablesItem.Overall);
                            if (ExtraVariablesItem.Specific != null)
                            {
                                foreach (var subItem in ExtraVariablesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Instruction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, StringVariable.ErrorMask?>? String1;
            public MaskItem<Exception?, StringVariable.ErrorMask?>? String2;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AVariable.ErrorMask?>>?>? ExtraVariables;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CallParentInstruction_FieldIndex enu = (CallParentInstruction_FieldIndex)index;
                switch (enu)
                {
                    case CallParentInstruction_FieldIndex.String1:
                        return String1;
                    case CallParentInstruction_FieldIndex.String2:
                        return String2;
                    case CallParentInstruction_FieldIndex.ExtraVariables:
                        return ExtraVariables;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CallParentInstruction_FieldIndex enu = (CallParentInstruction_FieldIndex)index;
                switch (enu)
                {
                    case CallParentInstruction_FieldIndex.String1:
                        this.String1 = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    case CallParentInstruction_FieldIndex.String2:
                        this.String2 = new MaskItem<Exception?, StringVariable.ErrorMask?>(ex, null);
                        break;
                    case CallParentInstruction_FieldIndex.ExtraVariables:
                        this.ExtraVariables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AVariable.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CallParentInstruction_FieldIndex enu = (CallParentInstruction_FieldIndex)index;
                switch (enu)
                {
                    case CallParentInstruction_FieldIndex.String1:
                        this.String1 = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    case CallParentInstruction_FieldIndex.String2:
                        this.String2 = (MaskItem<Exception?, StringVariable.ErrorMask?>?)obj;
                        break;
                    case CallParentInstruction_FieldIndex.ExtraVariables:
                        this.ExtraVariables = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AVariable.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (String1 != null) return true;
                if (String2 != null) return true;
                if (ExtraVariables != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                String1?.ToString(fg);
                String2?.ToString(fg);
                if (ExtraVariables.TryGet(out var ExtraVariablesItem))
                {
                    fg.AppendLine("ExtraVariables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ExtraVariablesItem.Overall);
                        if (ExtraVariablesItem.Specific != null)
                        {
                            foreach (var subItem in ExtraVariablesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.String1 = this.String1.Combine(rhs.String1, (l, r) => l.Combine(r));
                ret.String2 = this.String2.Combine(rhs.String2, (l, r) => l.Combine(r));
                ret.ExtraVariables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AVariable.ErrorMask?>>?>(ExceptionExt.Combine(this.ExtraVariables?.Overall, rhs.ExtraVariables?.Overall), ExceptionExt.Combine(this.ExtraVariables?.Specific, rhs.ExtraVariables?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Instruction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public StringVariable.TranslationMask? String1;
            public StringVariable.TranslationMask? String2;
            public AVariable.TranslationMask? ExtraVariables;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((String1 != null ? String1.OnOverall : DefaultOn, String1?.GetCrystal()));
                ret.Add((String2 != null ? String2.OnOverall : DefaultOn, String2?.GetCrystal()));
                ret.Add((ExtraVariables == null ? DefaultOn : !ExtraVariables.GetCrystal().CopyNothing, ExtraVariables?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object PexWriteTranslator => CallParentInstructionPexWriteTranslation.Instance;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((CallParentInstructionPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public new static CallParentInstruction CreateFromBinary(PexReader reader)
        {
            var ret = new CallParentInstruction();
            ((CallParentInstructionSetterCommon)((ICallParentInstructionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out CallParentInstruction item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CallParentInstructionSetterCommon)((ICallParentInstructionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CallParentInstruction GetNew()
        {
            return new CallParentInstruction();
        }

    }
    #endregion

    #region Interface
    public partial interface ICallParentInstruction :
        ICallParentInstructionGetter,
        IInstruction,
        ILoquiObjectSetter<ICallParentInstruction>
    {
        new StringVariable String1 { get; set; }
        new StringVariable String2 { get; set; }
        new ExtendedList<AVariable> ExtraVariables { get; }
    }

    public partial interface ICallParentInstructionGetter :
        IInstructionGetter,
        ILoquiObject<ICallParentInstructionGetter>,
        IPexItem
    {
        static new ILoquiRegistration Registration => CallParentInstruction_Registration.Instance;
        IStringVariableGetter String1 { get; }
        IStringVariableGetter String2 { get; }
        IReadOnlyList<IAVariableGetter> ExtraVariables { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CallParentInstructionMixIn
    {
        public static void Clear(this ICallParentInstruction item)
        {
            ((CallParentInstructionSetterCommon)((ICallParentInstructionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CallParentInstruction.Mask<bool> GetEqualsMask(
            this ICallParentInstructionGetter item,
            ICallParentInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICallParentInstructionGetter item,
            string? name = null,
            CallParentInstruction.Mask<bool>? printMask = null)
        {
            return ((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICallParentInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            CallParentInstruction.Mask<bool>? printMask = null)
        {
            ((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICallParentInstructionGetter item,
            ICallParentInstructionGetter rhs,
            CallParentInstruction.TranslationMask? equalsMask = null)
        {
            return ((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICallParentInstruction lhs,
            ICallParentInstructionGetter rhs,
            out CallParentInstruction.ErrorMask errorMask,
            CallParentInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CallParentInstruction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICallParentInstruction lhs,
            ICallParentInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CallParentInstruction DeepCopy(
            this ICallParentInstructionGetter item,
            CallParentInstruction.TranslationMask? copyMask = null)
        {
            return ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CallParentInstruction DeepCopy(
            this ICallParentInstructionGetter item,
            out CallParentInstruction.ErrorMask errorMask,
            CallParentInstruction.TranslationMask? copyMask = null)
        {
            return ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CallParentInstruction DeepCopy(
            this ICallParentInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this ICallParentInstruction item,
            PexReader reader)
        {
            ((CallParentInstructionSetterCommon)((ICallParentInstructionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum CallParentInstruction_FieldIndex
    {
        String1 = 0,
        String2 = 1,
        ExtraVariables = 2,
    }
    #endregion

    #region Registration
    public partial class CallParentInstruction_Registration : ILoquiRegistration
    {
        public static readonly CallParentInstruction_Registration Instance = new CallParentInstruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 35,
            version: 0);

        public const string GUID = "e54634df-83fb-4067-913e-3ced657509cd";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(CallParentInstruction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CallParentInstruction.ErrorMask);

        public static readonly Type ClassType = typeof(CallParentInstruction);

        public static readonly Type GetterType = typeof(ICallParentInstructionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICallParentInstruction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.CallParentInstruction";

        public const string Name = "CallParentInstruction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(CallParentInstructionPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CallParentInstructionSetterCommon : InstructionSetterCommon
    {
        public new static readonly CallParentInstructionSetterCommon Instance = new CallParentInstructionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICallParentInstruction item)
        {
            ClearPartial();
            item.String1.Clear();
            item.String2.Clear();
            item.ExtraVariables.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IInstruction item)
        {
            Clear(item: (ICallParentInstruction)item);
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            ICallParentInstruction item,
            PexReader reader)
        {
            item.String1 = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
            item.String2 = Mutagen.Bethesda.Skyrim.Pex.StringVariable.CreateFromBinary(reader: reader);
            CallParentInstructionPexCreateTranslation.FillBinaryExtraVariablesCustom(
                reader: reader,
                item: item);
        }
        
        public override void CopyInFromBinary(
            IInstruction item,
            PexReader reader)
        {
            CopyInFromBinary(
                item: (CallParentInstruction)item,
                reader: reader);
        }
        
        #endregion
        
    }
    public partial class CallParentInstructionCommon : InstructionCommon
    {
        public new static readonly CallParentInstructionCommon Instance = new CallParentInstructionCommon();

        public CallParentInstruction.Mask<bool> GetEqualsMask(
            ICallParentInstructionGetter item,
            ICallParentInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CallParentInstruction.Mask<bool>(false);
            ((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICallParentInstructionGetter item,
            ICallParentInstructionGetter rhs,
            CallParentInstruction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.String1 = MaskItemExt.Factory(item.String1.GetEqualsMask(rhs.String1, include), include);
            ret.String2 = MaskItemExt.Factory(item.String2.GetEqualsMask(rhs.String2, include), include);
            ret.ExtraVariables = item.ExtraVariables.CollectionEqualsHelper(
                rhs.ExtraVariables,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICallParentInstructionGetter item,
            string? name = null,
            CallParentInstruction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICallParentInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            CallParentInstruction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CallParentInstruction =>");
            }
            else
            {
                fg.AppendLine($"{name} (CallParentInstruction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICallParentInstructionGetter item,
            FileGeneration fg,
            CallParentInstruction.Mask<bool>? printMask = null)
        {
            InstructionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.String1?.Overall ?? true)
            {
                item.String1?.ToString(fg, "String1");
            }
            if (printMask?.String2?.Overall ?? true)
            {
                item.String2?.ToString(fg, "String2");
            }
            if (printMask?.ExtraVariables?.Overall ?? true)
            {
                fg.AppendLine("ExtraVariables =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ExtraVariables)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static CallParentInstruction_FieldIndex ConvertFieldIndex(Instruction_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICallParentInstructionGetter? lhs,
            ICallParentInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IInstructionGetter)lhs, (IInstructionGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String1) ?? true))
            {
                if (!object.Equals(lhs.String1, rhs.String1)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String2) ?? true))
            {
                if (!object.Equals(lhs.String2, rhs.String2)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.ExtraVariables) ?? true))
            {
                if (!lhs.ExtraVariables.SequenceEqualNullable(rhs.ExtraVariables)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IInstructionGetter? lhs,
            IInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (ICallParentInstructionGetter?)lhs,
                rhs: rhs as ICallParentInstructionGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(ICallParentInstructionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.String1);
            hash.Add(item.String2);
            hash.Add(item.ExtraVariables);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IInstructionGetter item)
        {
            return GetHashCode(item: (ICallParentInstructionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CallParentInstruction.GetNew();
        }
        
    }
    public partial class CallParentInstructionSetterTranslationCommon : InstructionSetterTranslationCommon
    {
        public new static readonly CallParentInstructionSetterTranslationCommon Instance = new CallParentInstructionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICallParentInstruction item,
            ICallParentInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IInstruction)item,
                (IInstructionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String1) ?? true))
            {
                errorMask?.PushIndex((int)CallParentInstruction_FieldIndex.String1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String1) ?? true))
                    {
                        item.String1 = rhs.String1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CallParentInstruction_FieldIndex.String1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String2) ?? true))
            {
                errorMask?.PushIndex((int)CallParentInstruction_FieldIndex.String2);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.String2) ?? true))
                    {
                        item.String2 = rhs.String2.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CallParentInstruction_FieldIndex.String2),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CallParentInstruction_FieldIndex.ExtraVariables) ?? true))
            {
                errorMask?.PushIndex((int)CallParentInstruction_FieldIndex.ExtraVariables);
                try
                {
                    item.ExtraVariables.SetTo(
                        rhs.ExtraVariables
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IInstruction item,
            IInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICallParentInstruction)item,
                rhs: (ICallParentInstructionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CallParentInstruction DeepCopy(
            ICallParentInstructionGetter item,
            CallParentInstruction.TranslationMask? copyMask = null)
        {
            CallParentInstruction ret = (CallParentInstruction)((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).GetNew();
            ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CallParentInstruction DeepCopy(
            ICallParentInstructionGetter item,
            out CallParentInstruction.ErrorMask errorMask,
            CallParentInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CallParentInstruction ret = (CallParentInstruction)((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).GetNew();
            ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CallParentInstruction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CallParentInstruction DeepCopy(
            ICallParentInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CallParentInstruction ret = (CallParentInstruction)((CallParentInstructionCommon)((ICallParentInstructionGetter)item).CommonInstance()!).GetNew();
            ((CallParentInstructionSetterTranslationCommon)((ICallParentInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class CallParentInstruction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CallParentInstruction_Registration.Instance;
        public new static CallParentInstruction_Registration Registration => CallParentInstruction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CallParentInstructionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CallParentInstructionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CallParentInstructionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class CallParentInstructionPexWriteTranslation :
        InstructionPexWriteTranslation,
        IPexWriteTranslator
    {
        public new readonly static CallParentInstructionPexWriteTranslation Instance = new CallParentInstructionPexWriteTranslation();

        public static partial void WriteBinaryExtraVariablesCustom(
            PexWriter writer,
            ICallParentInstructionGetter item);

        public static void WriteBinaryExtraVariables(
            PexWriter writer,
            ICallParentInstructionGetter item)
        {
            WriteBinaryExtraVariablesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            PexWriter writer,
            ICallParentInstructionGetter item)
        {
            InstructionPexWriteTranslation.Instance.Write(
                item: item,
                writer: writer);
            var String1Item = item.String1;
            ((StringVariablePexWriteTranslation)((IPexItem)String1Item).PexWriteTranslator).Write(
                item: String1Item,
                writer: writer);
            var String2Item = item.String2;
            ((StringVariablePexWriteTranslation)((IPexItem)String2Item).PexWriteTranslator).Write(
                item: String2Item,
                writer: writer);
            CallParentInstructionPexWriteTranslation.WriteBinaryExtraVariables(
                writer: writer,
                item: item);
        }

        public override void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (ICallParentInstructionGetter)item,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            IInstructionGetter item)
        {
            Write(
                item: (ICallParentInstructionGetter)item,
                writer: writer);
        }

    }

    public partial class CallParentInstructionPexCreateTranslation : InstructionPexCreateTranslation
    {
        public new readonly static CallParentInstructionPexCreateTranslation Instance = new CallParentInstructionPexCreateTranslation();

        public static partial void FillBinaryExtraVariablesCustom(
            PexReader reader,
            ICallParentInstruction item);

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class CallParentInstructionPexTranslationMixIn
    {
    }
    #endregion


}
#endregion

#endregion

