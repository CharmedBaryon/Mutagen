/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class ProcessFloatsInstruction :
        AMathInstruction,
        IEquatable<IProcessFloatsInstructionGetter>,
        ILoquiObjectSetter<ProcessFloatsInstruction>,
        IProcessFloatsInstruction
    {
        #region Ctor
        public ProcessFloatsInstruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region First
        public Single First { get; set; } = default;
        #endregion
        #region Second
        public Single Second { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ProcessFloatsInstructionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IProcessFloatsInstructionGetter rhs) return false;
            return ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IProcessFloatsInstructionGetter? obj)
        {
            return ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AMathInstruction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.First = initialValue;
                this.Second = initialValue;
            }

            public Mask(
                TItem Operation,
                TItem Identifier,
                TItem First,
                TItem Second)
            : base(
                Operation: Operation,
                Identifier: Identifier)
            {
                this.First = First;
                this.Second = Second;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem First;
            public TItem Second;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.First, rhs.First)) return false;
                if (!object.Equals(this.Second, rhs.Second)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.First);
                hash.Add(this.Second);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.First)) return false;
                if (!eval(this.Second)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.First)) return true;
                if (eval(this.Second)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ProcessFloatsInstruction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.First = eval(this.First);
                obj.Second = eval(this.Second);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ProcessFloatsInstruction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ProcessFloatsInstruction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ProcessFloatsInstruction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.First ?? true)
                    {
                        fg.AppendItem(First, "First");
                    }
                    if (printMask?.Second ?? true)
                    {
                        fg.AppendItem(Second, "Second");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AMathInstruction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? First;
            public Exception? Second;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ProcessFloatsInstruction_FieldIndex enu = (ProcessFloatsInstruction_FieldIndex)index;
                switch (enu)
                {
                    case ProcessFloatsInstruction_FieldIndex.First:
                        return First;
                    case ProcessFloatsInstruction_FieldIndex.Second:
                        return Second;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ProcessFloatsInstruction_FieldIndex enu = (ProcessFloatsInstruction_FieldIndex)index;
                switch (enu)
                {
                    case ProcessFloatsInstruction_FieldIndex.First:
                        this.First = ex;
                        break;
                    case ProcessFloatsInstruction_FieldIndex.Second:
                        this.Second = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ProcessFloatsInstruction_FieldIndex enu = (ProcessFloatsInstruction_FieldIndex)index;
                switch (enu)
                {
                    case ProcessFloatsInstruction_FieldIndex.First:
                        this.First = (Exception?)obj;
                        break;
                    case ProcessFloatsInstruction_FieldIndex.Second:
                        this.Second = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (First != null) return true;
                if (Second != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(First, "First");
                fg.AppendItem(Second, "Second");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.First = this.First.Combine(rhs.First);
                ret.Second = this.Second.Combine(rhs.Second);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AMathInstruction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool First;
            public bool Second;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.First = defaultOn;
                this.Second = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((First, null));
                ret.Add((Second, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object PexWriteTranslator => ProcessFloatsInstructionPexWriteTranslation.Instance;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((ProcessFloatsInstructionPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public new static ProcessFloatsInstruction CreateFromBinary(PexReader reader)
        {
            var ret = new ProcessFloatsInstruction();
            ((ProcessFloatsInstructionSetterCommon)((IProcessFloatsInstructionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out ProcessFloatsInstruction item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ProcessFloatsInstructionSetterCommon)((IProcessFloatsInstructionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ProcessFloatsInstruction GetNew()
        {
            return new ProcessFloatsInstruction();
        }

    }
    #endregion

    #region Interface
    public partial interface IProcessFloatsInstruction :
        IAMathInstruction,
        ILoquiObjectSetter<IProcessFloatsInstruction>,
        IProcessFloatsInstructionGetter
    {
        new Single First { get; set; }
        new Single Second { get; set; }
    }

    public partial interface IProcessFloatsInstructionGetter :
        IAMathInstructionGetter,
        ILoquiObject<IProcessFloatsInstructionGetter>,
        IPexItem
    {
        static new ILoquiRegistration Registration => ProcessFloatsInstruction_Registration.Instance;
        Single First { get; }
        Single Second { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ProcessFloatsInstructionMixIn
    {
        public static void Clear(this IProcessFloatsInstruction item)
        {
            ((ProcessFloatsInstructionSetterCommon)((IProcessFloatsInstructionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ProcessFloatsInstruction.Mask<bool> GetEqualsMask(
            this IProcessFloatsInstructionGetter item,
            IProcessFloatsInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IProcessFloatsInstructionGetter item,
            string? name = null,
            ProcessFloatsInstruction.Mask<bool>? printMask = null)
        {
            return ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IProcessFloatsInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            ProcessFloatsInstruction.Mask<bool>? printMask = null)
        {
            ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IProcessFloatsInstructionGetter item,
            IProcessFloatsInstructionGetter rhs,
            ProcessFloatsInstruction.TranslationMask? equalsMask = null)
        {
            return ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IProcessFloatsInstruction lhs,
            IProcessFloatsInstructionGetter rhs,
            out ProcessFloatsInstruction.ErrorMask errorMask,
            ProcessFloatsInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ProcessFloatsInstruction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IProcessFloatsInstruction lhs,
            IProcessFloatsInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ProcessFloatsInstruction DeepCopy(
            this IProcessFloatsInstructionGetter item,
            ProcessFloatsInstruction.TranslationMask? copyMask = null)
        {
            return ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ProcessFloatsInstruction DeepCopy(
            this IProcessFloatsInstructionGetter item,
            out ProcessFloatsInstruction.ErrorMask errorMask,
            ProcessFloatsInstruction.TranslationMask? copyMask = null)
        {
            return ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ProcessFloatsInstruction DeepCopy(
            this IProcessFloatsInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IProcessFloatsInstruction item,
            PexReader reader)
        {
            ((ProcessFloatsInstructionSetterCommon)((IProcessFloatsInstructionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum ProcessFloatsInstruction_FieldIndex
    {
        Operation = 0,
        Identifier = 1,
        First = 2,
        Second = 3,
    }
    #endregion

    #region Registration
    public partial class ProcessFloatsInstruction_Registration : ILoquiRegistration
    {
        public static readonly ProcessFloatsInstruction_Registration Instance = new ProcessFloatsInstruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "c421495b-42fe-467f-a0f0-2f5346c52be5";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(ProcessFloatsInstruction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ProcessFloatsInstruction.ErrorMask);

        public static readonly Type ClassType = typeof(ProcessFloatsInstruction);

        public static readonly Type GetterType = typeof(IProcessFloatsInstructionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IProcessFloatsInstruction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.ProcessFloatsInstruction";

        public const string Name = "ProcessFloatsInstruction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(ProcessFloatsInstructionPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ProcessFloatsInstructionSetterCommon : AMathInstructionSetterCommon
    {
        public new static readonly ProcessFloatsInstructionSetterCommon Instance = new ProcessFloatsInstructionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IProcessFloatsInstruction item)
        {
            ClearPartial();
            item.First = default;
            item.Second = default;
            base.Clear(item);
        }
        
        public override void Clear(IAMathInstruction item)
        {
            Clear(item: (IProcessFloatsInstruction)item);
        }
        
        public override void Clear(IInstruction item)
        {
            Clear(item: (IProcessFloatsInstruction)item);
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IProcessFloatsInstruction item,
            PexReader reader)
        {
            reader.EnsureVariableType(VariableType.Float);
            item.First = FloatBinaryTranslation<PexReader, PexWriter>.Instance.Parse(reader: reader);
            reader.EnsureVariableType(VariableType.Float);
            item.Second = FloatBinaryTranslation<PexReader, PexWriter>.Instance.Parse(reader: reader);
        }
        
        public override void CopyInFromBinary(
            IAMathInstruction item,
            PexReader reader)
        {
            CopyInFromBinary(
                item: (ProcessFloatsInstruction)item,
                reader: reader);
        }
        
        public override void CopyInFromBinary(
            IInstruction item,
            PexReader reader)
        {
            CopyInFromBinary(
                item: (ProcessFloatsInstruction)item,
                reader: reader);
        }
        
        #endregion
        
    }
    public partial class ProcessFloatsInstructionCommon : AMathInstructionCommon
    {
        public new static readonly ProcessFloatsInstructionCommon Instance = new ProcessFloatsInstructionCommon();

        public ProcessFloatsInstruction.Mask<bool> GetEqualsMask(
            IProcessFloatsInstructionGetter item,
            IProcessFloatsInstructionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ProcessFloatsInstruction.Mask<bool>(false);
            ((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IProcessFloatsInstructionGetter item,
            IProcessFloatsInstructionGetter rhs,
            ProcessFloatsInstruction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.First = item.First.EqualsWithin(rhs.First);
            ret.Second = item.Second.EqualsWithin(rhs.Second);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IProcessFloatsInstructionGetter item,
            string? name = null,
            ProcessFloatsInstruction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IProcessFloatsInstructionGetter item,
            FileGeneration fg,
            string? name = null,
            ProcessFloatsInstruction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ProcessFloatsInstruction =>");
            }
            else
            {
                fg.AppendLine($"{name} (ProcessFloatsInstruction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IProcessFloatsInstructionGetter item,
            FileGeneration fg,
            ProcessFloatsInstruction.Mask<bool>? printMask = null)
        {
            AMathInstructionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.First ?? true)
            {
                fg.AppendItem(item.First, "First");
            }
            if (printMask?.Second ?? true)
            {
                fg.AppendItem(item.Second, "Second");
            }
        }
        
        public static ProcessFloatsInstruction_FieldIndex ConvertFieldIndex(AMathInstruction_FieldIndex index)
        {
            switch (index)
            {
                case AMathInstruction_FieldIndex.Operation:
                    return (ProcessFloatsInstruction_FieldIndex)((int)index);
                case AMathInstruction_FieldIndex.Identifier:
                    return (ProcessFloatsInstruction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ProcessFloatsInstruction_FieldIndex ConvertFieldIndex(Instruction_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IProcessFloatsInstructionGetter? lhs,
            IProcessFloatsInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAMathInstructionGetter)lhs, (IAMathInstructionGetter)rhs, crystal)) return false;
            if ((crystal?.GetShouldTranslate((int)ProcessFloatsInstruction_FieldIndex.First) ?? true))
            {
                if (!lhs.First.EqualsWithin(rhs.First)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)ProcessFloatsInstruction_FieldIndex.Second) ?? true))
            {
                if (!lhs.Second.EqualsWithin(rhs.Second)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAMathInstructionGetter? lhs,
            IAMathInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IProcessFloatsInstructionGetter?)lhs,
                rhs: rhs as IProcessFloatsInstructionGetter,
                crystal: crystal);
        }
        
        public override bool Equals(
            IInstructionGetter? lhs,
            IInstructionGetter? rhs,
            TranslationCrystal? crystal)
        {
            return Equals(
                lhs: (IProcessFloatsInstructionGetter?)lhs,
                rhs: rhs as IProcessFloatsInstructionGetter,
                crystal: crystal);
        }
        
        public virtual int GetHashCode(IProcessFloatsInstructionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.First);
            hash.Add(item.Second);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAMathInstructionGetter item)
        {
            return GetHashCode(item: (IProcessFloatsInstructionGetter)item);
        }
        
        public override int GetHashCode(IInstructionGetter item)
        {
            return GetHashCode(item: (IProcessFloatsInstructionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ProcessFloatsInstruction.GetNew();
        }
        
    }
    public partial class ProcessFloatsInstructionSetterTranslationCommon : AMathInstructionSetterTranslationCommon
    {
        public new static readonly ProcessFloatsInstructionSetterTranslationCommon Instance = new ProcessFloatsInstructionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IProcessFloatsInstruction item,
            IProcessFloatsInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAMathInstruction)item,
                (IAMathInstructionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ProcessFloatsInstruction_FieldIndex.First) ?? true))
            {
                item.First = rhs.First;
            }
            if ((copyMask?.GetShouldTranslate((int)ProcessFloatsInstruction_FieldIndex.Second) ?? true))
            {
                item.Second = rhs.Second;
            }
        }
        
        
        public override void DeepCopyIn(
            IAMathInstruction item,
            IAMathInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProcessFloatsInstruction)item,
                rhs: (IProcessFloatsInstructionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IInstruction item,
            IInstructionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProcessFloatsInstruction)item,
                rhs: (IProcessFloatsInstructionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ProcessFloatsInstruction DeepCopy(
            IProcessFloatsInstructionGetter item,
            ProcessFloatsInstruction.TranslationMask? copyMask = null)
        {
            ProcessFloatsInstruction ret = (ProcessFloatsInstruction)((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).GetNew();
            ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ProcessFloatsInstruction DeepCopy(
            IProcessFloatsInstructionGetter item,
            out ProcessFloatsInstruction.ErrorMask errorMask,
            ProcessFloatsInstruction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ProcessFloatsInstruction ret = (ProcessFloatsInstruction)((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).GetNew();
            ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ProcessFloatsInstruction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ProcessFloatsInstruction DeepCopy(
            IProcessFloatsInstructionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ProcessFloatsInstruction ret = (ProcessFloatsInstruction)((ProcessFloatsInstructionCommon)((IProcessFloatsInstructionGetter)item).CommonInstance()!).GetNew();
            ((ProcessFloatsInstructionSetterTranslationCommon)((IProcessFloatsInstructionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class ProcessFloatsInstruction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ProcessFloatsInstruction_Registration.Instance;
        public new static ProcessFloatsInstruction_Registration Registration => ProcessFloatsInstruction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProcessFloatsInstructionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ProcessFloatsInstructionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProcessFloatsInstructionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class ProcessFloatsInstructionPexWriteTranslation :
        AMathInstructionPexWriteTranslation,
        IPexWriteTranslator
    {
        public new readonly static ProcessFloatsInstructionPexWriteTranslation Instance = new ProcessFloatsInstructionPexWriteTranslation();

        public void Write(
            PexWriter writer,
            IProcessFloatsInstructionGetter item)
        {
            AMathInstructionPexWriteTranslation.Instance.Write(
                item: item,
                writer: writer);
            writer.Write((byte)VariableType.Float);
            FloatBinaryTranslation<PexReader, PexWriter>.Instance.Write(
                writer: writer,
                item: item.First);
            writer.Write((byte)VariableType.Float);
            FloatBinaryTranslation<PexReader, PexWriter>.Instance.Write(
                writer: writer,
                item: item.Second);
        }

        public override void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IProcessFloatsInstructionGetter)item,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            IAMathInstructionGetter item)
        {
            Write(
                item: (IProcessFloatsInstructionGetter)item,
                writer: writer);
        }

        public override void Write(
            PexWriter writer,
            IInstructionGetter item)
        {
            Write(
                item: (IProcessFloatsInstructionGetter)item,
                writer: writer);
        }

    }

    public partial class ProcessFloatsInstructionPexCreateTranslation : AMathInstructionPexCreateTranslation
    {
        public new readonly static ProcessFloatsInstructionPexCreateTranslation Instance = new ProcessFloatsInstructionPexCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class ProcessFloatsInstructionPexTranslationMixIn
    {
    }
    #endregion


}
#endregion

#endregion

