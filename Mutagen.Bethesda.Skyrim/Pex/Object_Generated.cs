/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Pex;
using Mutagen.Bethesda.Pex.Binary.Translations;
using Mutagen.Bethesda.Skyrim.Pex;
using Mutagen.Bethesda.Skyrim.Pex.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Class
    public partial class Object :
        IEquatable<IObjectGetter>,
        ILoquiObjectSetter<Object>,
        IObject
    {
        #region Ctor
        public Object()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; } = string.Empty;
        #endregion
        #region ParentClassName
        public String ParentClassName { get; set; } = string.Empty;
        #endregion
        #region DocString
        public String DocString { get; set; } = string.Empty;
        #endregion
        #region RawUserFlags
        public UInt32 RawUserFlags { get; set; } = default;
        #endregion
        #region AutoStateName
        public String AutoStateName { get; set; } = string.Empty;
        #endregion
        #region Variables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectVariable> _Variables = new ExtendedList<ObjectVariable>();
        public ExtendedList<ObjectVariable> Variables
        {
            get => this._Variables;
            init => this._Variables = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectVariableGetter> IObjectGetter.Variables => _Variables;
        #endregion

        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Property> _Properties = new ExtendedList<Property>();
        public ExtendedList<Property> Properties
        {
            get => this._Properties;
            init => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPropertyGetter> IObjectGetter.Properties => _Properties;
        #endregion

        #endregion
        #region States
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<State> _States = new ExtendedList<State>();
        public ExtendedList<State> States
        {
            get => this._States;
            init => this._States = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IStateGetter> IObjectGetter.States => _States;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectGetter rhs) return false;
            return ((ObjectCommon)((IObjectGetter)this).CommonInstance()!).Equals(this, rhs, crystal: null);
        }

        public bool Equals(IObjectGetter? obj)
        {
            return ((ObjectCommon)((IObjectGetter)this).CommonInstance()!).Equals(this, obj, crystal: null);
        }

        public override int GetHashCode() => ((ObjectCommon)((IObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.ParentClassName = initialValue;
                this.DocString = initialValue;
                this.RawUserFlags = initialValue;
                this.AutoStateName = initialValue;
                this.Variables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectVariable.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectVariable.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Property.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Property.Mask<TItem>?>>());
                this.States = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, State.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, State.Mask<TItem>?>>());
            }

            public Mask(
                TItem Name,
                TItem ParentClassName,
                TItem DocString,
                TItem RawUserFlags,
                TItem AutoStateName,
                TItem Variables,
                TItem Properties,
                TItem States)
            {
                this.Name = Name;
                this.ParentClassName = ParentClassName;
                this.DocString = DocString;
                this.RawUserFlags = RawUserFlags;
                this.AutoStateName = AutoStateName;
                this.Variables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectVariable.Mask<TItem>?>>?>(Variables, Enumerable.Empty<MaskItemIndexed<TItem, ObjectVariable.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Property.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, Property.Mask<TItem>?>>());
                this.States = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, State.Mask<TItem>?>>?>(States, Enumerable.Empty<MaskItemIndexed<TItem, State.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem ParentClassName;
            public TItem DocString;
            public TItem RawUserFlags;
            public TItem AutoStateName;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectVariable.Mask<TItem>?>>?>? Variables;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Property.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, State.Mask<TItem>?>>?>? States;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ParentClassName, rhs.ParentClassName)) return false;
                if (!object.Equals(this.DocString, rhs.DocString)) return false;
                if (!object.Equals(this.RawUserFlags, rhs.RawUserFlags)) return false;
                if (!object.Equals(this.AutoStateName, rhs.AutoStateName)) return false;
                if (!object.Equals(this.Variables, rhs.Variables)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.States, rhs.States)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.ParentClassName);
                hash.Add(this.DocString);
                hash.Add(this.RawUserFlags);
                hash.Add(this.AutoStateName);
                hash.Add(this.Variables);
                hash.Add(this.Properties);
                hash.Add(this.States);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.ParentClassName)) return false;
                if (!eval(this.DocString)) return false;
                if (!eval(this.RawUserFlags)) return false;
                if (!eval(this.AutoStateName)) return false;
                if (this.Variables != null)
                {
                    if (!eval(this.Variables.Overall)) return false;
                    if (this.Variables.Specific != null)
                    {
                        foreach (var item in this.Variables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.States != null)
                {
                    if (!eval(this.States.Overall)) return false;
                    if (this.States.Specific != null)
                    {
                        foreach (var item in this.States.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.ParentClassName)) return true;
                if (eval(this.DocString)) return true;
                if (eval(this.RawUserFlags)) return true;
                if (eval(this.AutoStateName)) return true;
                if (this.Variables != null)
                {
                    if (eval(this.Variables.Overall)) return true;
                    if (this.Variables.Specific != null)
                    {
                        foreach (var item in this.Variables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.States != null)
                {
                    if (eval(this.States.Overall)) return true;
                    if (this.States.Specific != null)
                    {
                        foreach (var item in this.States.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Object.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.ParentClassName = eval(this.ParentClassName);
                obj.DocString = eval(this.DocString);
                obj.RawUserFlags = eval(this.RawUserFlags);
                obj.AutoStateName = eval(this.AutoStateName);
                if (Variables != null)
                {
                    obj.Variables = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectVariable.Mask<R>?>>?>(eval(this.Variables.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectVariable.Mask<R>?>>());
                    if (Variables.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectVariable.Mask<R>?>>();
                        obj.Variables.Specific = l;
                        foreach (var item in Variables.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ObjectVariable.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ObjectVariable.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Property.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, Property.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Property.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Property.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Property.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (States != null)
                {
                    obj.States = new MaskItem<R, IEnumerable<MaskItemIndexed<R, State.Mask<R>?>>?>(eval(this.States.Overall), Enumerable.Empty<MaskItemIndexed<R, State.Mask<R>?>>());
                    if (States.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, State.Mask<R>?>>();
                        obj.States.Specific = l;
                        foreach (var item in States.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, State.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, State.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Object.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Object.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Object.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.ParentClassName ?? true)
                    {
                        fg.AppendItem(ParentClassName, "ParentClassName");
                    }
                    if (printMask?.DocString ?? true)
                    {
                        fg.AppendItem(DocString, "DocString");
                    }
                    if (printMask?.RawUserFlags ?? true)
                    {
                        fg.AppendItem(RawUserFlags, "RawUserFlags");
                    }
                    if (printMask?.AutoStateName ?? true)
                    {
                        fg.AppendItem(AutoStateName, "AutoStateName");
                    }
                    if ((printMask?.Variables?.Overall ?? true)
                        && Variables.TryGet(out var VariablesItem))
                    {
                        fg.AppendLine("Variables =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(VariablesItem.Overall);
                            if (VariablesItem.Specific != null)
                            {
                                foreach (var subItem in VariablesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties.TryGet(out var PropertiesItem))
                    {
                        fg.AppendLine("Properties =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.States?.Overall ?? true)
                        && States.TryGet(out var StatesItem))
                    {
                        fg.AppendLine("States =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(StatesItem.Overall);
                            if (StatesItem.Specific != null)
                            {
                                foreach (var subItem in StatesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? ParentClassName;
            public Exception? DocString;
            public Exception? RawUserFlags;
            public Exception? AutoStateName;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectVariable.ErrorMask?>>?>? Variables;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Property.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, State.ErrorMask?>>?>? States;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Object_FieldIndex enu = (Object_FieldIndex)index;
                switch (enu)
                {
                    case Object_FieldIndex.Name:
                        return Name;
                    case Object_FieldIndex.ParentClassName:
                        return ParentClassName;
                    case Object_FieldIndex.DocString:
                        return DocString;
                    case Object_FieldIndex.RawUserFlags:
                        return RawUserFlags;
                    case Object_FieldIndex.AutoStateName:
                        return AutoStateName;
                    case Object_FieldIndex.Variables:
                        return Variables;
                    case Object_FieldIndex.Properties:
                        return Properties;
                    case Object_FieldIndex.States:
                        return States;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Object_FieldIndex enu = (Object_FieldIndex)index;
                switch (enu)
                {
                    case Object_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Object_FieldIndex.ParentClassName:
                        this.ParentClassName = ex;
                        break;
                    case Object_FieldIndex.DocString:
                        this.DocString = ex;
                        break;
                    case Object_FieldIndex.RawUserFlags:
                        this.RawUserFlags = ex;
                        break;
                    case Object_FieldIndex.AutoStateName:
                        this.AutoStateName = ex;
                        break;
                    case Object_FieldIndex.Variables:
                        this.Variables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectVariable.ErrorMask?>>?>(ex, null);
                        break;
                    case Object_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Property.ErrorMask?>>?>(ex, null);
                        break;
                    case Object_FieldIndex.States:
                        this.States = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, State.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Object_FieldIndex enu = (Object_FieldIndex)index;
                switch (enu)
                {
                    case Object_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Object_FieldIndex.ParentClassName:
                        this.ParentClassName = (Exception?)obj;
                        break;
                    case Object_FieldIndex.DocString:
                        this.DocString = (Exception?)obj;
                        break;
                    case Object_FieldIndex.RawUserFlags:
                        this.RawUserFlags = (Exception?)obj;
                        break;
                    case Object_FieldIndex.AutoStateName:
                        this.AutoStateName = (Exception?)obj;
                        break;
                    case Object_FieldIndex.Variables:
                        this.Variables = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectVariable.ErrorMask?>>?>)obj;
                        break;
                    case Object_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Property.ErrorMask?>>?>)obj;
                        break;
                    case Object_FieldIndex.States:
                        this.States = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, State.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (ParentClassName != null) return true;
                if (DocString != null) return true;
                if (RawUserFlags != null) return true;
                if (AutoStateName != null) return true;
                if (Variables != null) return true;
                if (Properties != null) return true;
                if (States != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Name, "Name");
                fg.AppendItem(ParentClassName, "ParentClassName");
                fg.AppendItem(DocString, "DocString");
                fg.AppendItem(RawUserFlags, "RawUserFlags");
                fg.AppendItem(AutoStateName, "AutoStateName");
                if (Variables.TryGet(out var VariablesItem))
                {
                    fg.AppendLine("Variables =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(VariablesItem.Overall);
                        if (VariablesItem.Specific != null)
                        {
                            foreach (var subItem in VariablesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Properties.TryGet(out var PropertiesItem))
                {
                    fg.AppendLine("Properties =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (States.TryGet(out var StatesItem))
                {
                    fg.AppendLine("States =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(StatesItem.Overall);
                        if (StatesItem.Specific != null)
                        {
                            foreach (var subItem in StatesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ParentClassName = this.ParentClassName.Combine(rhs.ParentClassName);
                ret.DocString = this.DocString.Combine(rhs.DocString);
                ret.RawUserFlags = this.RawUserFlags.Combine(rhs.RawUserFlags);
                ret.AutoStateName = this.AutoStateName.Combine(rhs.AutoStateName);
                ret.Variables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectVariable.ErrorMask?>>?>(ExceptionExt.Combine(this.Variables?.Overall, rhs.Variables?.Overall), ExceptionExt.Combine(this.Variables?.Specific, rhs.Variables?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Property.ErrorMask?>>?>(ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.States = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, State.ErrorMask?>>?>(ExceptionExt.Combine(this.States?.Overall, rhs.States?.Overall), ExceptionExt.Combine(this.States?.Specific, rhs.States?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool ParentClassName;
            public bool DocString;
            public bool RawUserFlags;
            public bool AutoStateName;
            public ObjectVariable.TranslationMask? Variables;
            public Property.TranslationMask? Properties;
            public State.TranslationMask? States;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.ParentClassName = defaultOn;
                this.DocString = defaultOn;
                this.RawUserFlags = defaultOn;
                this.AutoStateName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((ParentClassName, null));
                ret.Add((DocString, null));
                ret.Add((RawUserFlags, null));
                ret.Add((AutoStateName, null));
                ret.Add((Variables == null ? DefaultOn : !Variables.GetCrystal().CopyNothing, Variables?.GetCrystal()));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((States == null ? DefaultOn : !States.GetCrystal().CopyNothing, States?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Pex Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object PexWriteTranslator => ObjectPexWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IPexItem.PexWriteTranslator => this.PexWriteTranslator;
        void IPexItem.WriteToBinary(PexWriter writer)
        {
            ((ObjectPexWriteTranslation)this.PexWriteTranslator).Write(
                item: this,
                writer: writer);
        }
        #region Pex Create
        public static Object CreateFromBinary(PexReader reader)
        {
            var ret = new Object();
            ((ObjectSetterCommon)((IObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                reader: reader);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            PexReader reader,
            out Object item)
        {
            var startPos = reader.Position;
            item = CreateFromBinary(reader: reader);
            return startPos != reader.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ObjectSetterCommon)((IObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Object GetNew()
        {
            return new Object();
        }

    }
    #endregion

    #region Interface
    public partial interface IObject :
        IHasUserFlags,
        ILoquiObjectSetter<IObject>,
        IObjectGetter
    {
        new String Name { get; set; }
        new String ParentClassName { get; set; }
        new String DocString { get; set; }
        new UInt32 RawUserFlags { get; set; }
        new String AutoStateName { get; set; }
        new ExtendedList<ObjectVariable> Variables { get; }
        new ExtendedList<Property> Properties { get; }
        new ExtendedList<State> States { get; }
    }

    public partial interface IObjectGetter :
        ILoquiObject,
        IHasUserFlagsGetter,
        ILoquiObject<IObjectGetter>,
        IPexItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Object_Registration.Instance;
        String Name { get; }
        String ParentClassName { get; }
        String DocString { get; }
        UInt32 RawUserFlags { get; }
        String AutoStateName { get; }
        IReadOnlyList<IObjectVariableGetter> Variables { get; }
        IReadOnlyList<IPropertyGetter> Properties { get; }
        IReadOnlyList<IStateGetter> States { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectMixIn
    {
        public static void Clear(this IObject item)
        {
            ((ObjectSetterCommon)((IObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Object.Mask<bool> GetEqualsMask(
            this IObjectGetter item,
            IObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectCommon)((IObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectGetter item,
            string? name = null,
            Object.Mask<bool>? printMask = null)
        {
            return ((ObjectCommon)((IObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectGetter item,
            FileGeneration fg,
            string? name = null,
            Object.Mask<bool>? printMask = null)
        {
            ((ObjectCommon)((IObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectGetter item,
            IObjectGetter rhs,
            Object.TranslationMask? equalsMask = null)
        {
            return ((ObjectCommon)((IObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                crystal: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObject lhs,
            IObjectGetter rhs)
        {
            ((ObjectSetterTranslationCommon)((IObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObject lhs,
            IObjectGetter rhs,
            Object.TranslationMask? copyMask = null)
        {
            ((ObjectSetterTranslationCommon)((IObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObject lhs,
            IObjectGetter rhs,
            out Object.ErrorMask errorMask,
            Object.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectSetterTranslationCommon)((IObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Object.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObject lhs,
            IObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectSetterTranslationCommon)((IObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Object DeepCopy(
            this IObjectGetter item,
            Object.TranslationMask? copyMask = null)
        {
            return ((ObjectSetterTranslationCommon)((IObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Object DeepCopy(
            this IObjectGetter item,
            out Object.ErrorMask errorMask,
            Object.TranslationMask? copyMask = null)
        {
            return ((ObjectSetterTranslationCommon)((IObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Object DeepCopy(
            this IObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectSetterTranslationCommon)((IObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Pex Translation
        public static void CopyInFromBinary(
            this IObject item,
            PexReader reader)
        {
            ((ObjectSetterCommon)((IObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                reader: reader);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    #region Field Index
    public enum Object_FieldIndex
    {
        Name = 0,
        ParentClassName = 1,
        DocString = 2,
        RawUserFlags = 3,
        AutoStateName = 4,
        Variables = 5,
        Properties = 6,
        States = 7,
    }
    #endregion

    #region Registration
    public partial class Object_Registration : ILoquiRegistration
    {
        public static readonly Object_Registration Instance = new Object_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_SkyrimPex.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_SkyrimPex.ProtocolKey,
            msgID: 6,
            version: 0);

        public const string GUID = "fbbe966b-4956-4867-be4d-fbd4181e2417";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Object.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Object.ErrorMask);

        public static readonly Type ClassType = typeof(Object);

        public static readonly Type GetterType = typeof(IObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObject);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Pex.Object";

        public const string Name = "Object";

        public const string Namespace = "Mutagen.Bethesda.Skyrim.Pex";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type PexWriteTranslation = typeof(ObjectPexWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectSetterCommon
    {
        public static readonly ObjectSetterCommon Instance = new ObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObject item)
        {
            ClearPartial();
            item.Name = string.Empty;
            item.ParentClassName = string.Empty;
            item.DocString = string.Empty;
            item.RawUserFlags = default;
            item.AutoStateName = string.Empty;
            item.Variables.Clear();
            item.Properties.Clear();
            item.States.Clear();
        }
        
        #region Pex Translation
        public virtual void CopyInFromBinary(
            IObject item,
            PexReader reader)
        {
            item.Name = reader.ReadString();
            ObjectPexCreateTranslation.FillBinarySizeMarkerCustom(
                reader: reader,
                item: item);
            item.ParentClassName = reader.ReadString();
            item.DocString = reader.ReadString();
            item.RawUserFlags = reader.ReadUInt32();
            item.AutoStateName = reader.ReadString();
            item.Variables.SetTo(
                Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, ObjectVariable>.Instance.Parse(
                    reader: reader,
                    amount: reader.ReadUInt16(),
                    transl: ObjectVariable.TryCreateFromBinary));
            item.Properties.SetTo(
                Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, Property>.Instance.Parse(
                    reader: reader,
                    amount: reader.ReadUInt16(),
                    transl: Property.TryCreateFromBinary));
            item.States.SetTo(
                Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, State>.Instance.Parse(
                    reader: reader,
                    amount: reader.ReadUInt16(),
                    transl: State.TryCreateFromBinary));
            ObjectPexCreateTranslation.FillBinarySizeConfirmationCustom(
                reader: reader,
                item: item);
        }
        
        #endregion
        
    }
    public partial class ObjectCommon
    {
        public static readonly ObjectCommon Instance = new ObjectCommon();

        public Object.Mask<bool> GetEqualsMask(
            IObjectGetter item,
            IObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Object.Mask<bool>(false);
            ((ObjectCommon)((IObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectGetter item,
            IObjectGetter rhs,
            Object.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.ParentClassName = string.Equals(item.ParentClassName, rhs.ParentClassName);
            ret.DocString = string.Equals(item.DocString, rhs.DocString);
            ret.RawUserFlags = item.RawUserFlags == rhs.RawUserFlags;
            ret.AutoStateName = string.Equals(item.AutoStateName, rhs.AutoStateName);
            ret.Variables = item.Variables.CollectionEqualsHelper(
                rhs.Variables,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.States = item.States.CollectionEqualsHelper(
                rhs.States,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IObjectGetter item,
            string? name = null,
            Object.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectGetter item,
            FileGeneration fg,
            string? name = null,
            Object.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Object =>");
            }
            else
            {
                fg.AppendLine($"{name} (Object) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectGetter item,
            FileGeneration fg,
            Object.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                fg.AppendItem(item.Name, "Name");
            }
            if (printMask?.ParentClassName ?? true)
            {
                fg.AppendItem(item.ParentClassName, "ParentClassName");
            }
            if (printMask?.DocString ?? true)
            {
                fg.AppendItem(item.DocString, "DocString");
            }
            if (printMask?.RawUserFlags ?? true)
            {
                fg.AppendItem(item.RawUserFlags, "RawUserFlags");
            }
            if (printMask?.AutoStateName ?? true)
            {
                fg.AppendItem(item.AutoStateName, "AutoStateName");
            }
            if (printMask?.Variables?.Overall ?? true)
            {
                fg.AppendLine("Variables =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Variables)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Properties?.Overall ?? true)
            {
                fg.AppendLine("Properties =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Properties)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.States?.Overall ?? true)
            {
                fg.AppendLine("States =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.States)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectGetter? lhs,
            IObjectGetter? rhs,
            TranslationCrystal? crystal)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.ParentClassName) ?? true))
            {
                if (!string.Equals(lhs.ParentClassName, rhs.ParentClassName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.DocString) ?? true))
            {
                if (!string.Equals(lhs.DocString, rhs.DocString)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.RawUserFlags) ?? true))
            {
                if (lhs.RawUserFlags != rhs.RawUserFlags) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.AutoStateName) ?? true))
            {
                if (!string.Equals(lhs.AutoStateName, rhs.AutoStateName)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.Variables) ?? true))
            {
                if (!lhs.Variables.SequenceEqualNullable(rhs.Variables)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties)) return false;
            }
            if ((crystal?.GetShouldTranslate((int)Object_FieldIndex.States) ?? true))
            {
                if (!lhs.States.SequenceEqualNullable(rhs.States)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.ParentClassName);
            hash.Add(item.DocString);
            hash.Add(item.RawUserFlags);
            hash.Add(item.AutoStateName);
            hash.Add(item.Variables);
            hash.Add(item.Properties);
            hash.Add(item.States);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Object.GetNew();
        }
        
    }
    public partial class ObjectSetterTranslationCommon
    {
        public static readonly ObjectSetterTranslationCommon Instance = new ObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObject item,
            IObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.ParentClassName) ?? true))
            {
                item.ParentClassName = rhs.ParentClassName;
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.DocString) ?? true))
            {
                item.DocString = rhs.DocString;
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.RawUserFlags) ?? true))
            {
                item.RawUserFlags = rhs.RawUserFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.AutoStateName) ?? true))
            {
                item.AutoStateName = rhs.AutoStateName;
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.Variables) ?? true))
            {
                errorMask?.PushIndex((int)Object_FieldIndex.Variables);
                try
                {
                    item.Variables.SetTo(
                        rhs.Variables
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Object_FieldIndex.Properties);
                try
                {
                    item.Properties.SetTo(
                        rhs.Properties
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Object_FieldIndex.States) ?? true))
            {
                errorMask?.PushIndex((int)Object_FieldIndex.States);
                try
                {
                    item.States.SetTo(
                        rhs.States
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Object DeepCopy(
            IObjectGetter item,
            Object.TranslationMask? copyMask = null)
        {
            Object ret = (Object)((ObjectCommon)((IObjectGetter)item).CommonInstance()!).GetNew();
            ((ObjectSetterTranslationCommon)((IObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Object DeepCopy(
            IObjectGetter item,
            out Object.ErrorMask errorMask,
            Object.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Object ret = (Object)((ObjectCommon)((IObjectGetter)item).CommonInstance()!).GetNew();
            ((ObjectSetterTranslationCommon)((IObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Object.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Object DeepCopy(
            IObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Object ret = (Object)((ObjectCommon)((IObjectGetter)item).CommonInstance()!).GetNew();
            ((ObjectSetterTranslationCommon)((IObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Pex
{
    public partial class Object
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Object_Registration.Instance;
        public static Object_Registration Registration => Object_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Pex Translation
namespace Mutagen.Bethesda.Skyrim.Pex.Internals
{
    public partial class ObjectPexWriteTranslation : IPexWriteTranslator
    {
        public readonly static ObjectPexWriteTranslation Instance = new ObjectPexWriteTranslation();

        public static partial void WriteBinarySizeMarkerCustom(
            PexWriter writer,
            IObjectGetter item);

        public static void WriteBinarySizeMarker(
            PexWriter writer,
            IObjectGetter item)
        {
            WriteBinarySizeMarkerCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySizeConfirmationCustom(
            PexWriter writer,
            IObjectGetter item);

        public static void WriteBinarySizeConfirmation(
            PexWriter writer,
            IObjectGetter item)
        {
            WriteBinarySizeConfirmationCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            PexWriter writer,
            IObjectGetter item)
        {
            writer.Write(item.Name);
            ObjectPexWriteTranslation.WriteBinarySizeMarker(
                writer: writer,
                item: item);
            writer.Write(item.ParentClassName);
            writer.Write(item.DocString);
            writer.Write(item.RawUserFlags);
            writer.Write(item.AutoStateName);
            Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, IObjectVariableGetter>.Instance.Write(
                writer: writer,
                items: item.Variables,
                countLengthLength: 2,
                transl: (PexWriter subWriter, IObjectVariableGetter subItem) =>
                {
                    var Item = subItem;
                    ((ObjectVariablePexWriteTranslation)((IPexItem)Item).PexWriteTranslator).Write(
                        item: Item,
                        writer: subWriter);
                });
            Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, IPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                countLengthLength: 2,
                transl: (PexWriter subWriter, IPropertyGetter subItem) =>
                {
                    var Item = subItem;
                    ((PropertyPexWriteTranslation)((IPexItem)Item).PexWriteTranslator).Write(
                        item: Item,
                        writer: subWriter);
                });
            Mutagen.Bethesda.Translations.Binary.ListBinaryTranslation<PexWriter, PexReader, IStateGetter>.Instance.Write(
                writer: writer,
                items: item.States,
                countLengthLength: 2,
                transl: (PexWriter subWriter, IStateGetter subItem) =>
                {
                    var Item = subItem;
                    ((StatePexWriteTranslation)((IPexItem)Item).PexWriteTranslator).Write(
                        item: Item,
                        writer: subWriter);
                });
            ObjectPexWriteTranslation.WriteBinarySizeConfirmation(
                writer: writer,
                item: item);
        }

        public void Write(
            PexWriter writer,
            object item)
        {
            Write(
                item: (IObjectGetter)item,
                writer: writer);
        }

    }

    public partial class ObjectPexCreateTranslation
    {
        public readonly static ObjectPexCreateTranslation Instance = new ObjectPexCreateTranslation();

        public static partial void FillBinarySizeMarkerCustom(
            PexReader reader,
            IObject item);

        public static partial void FillBinarySizeConfirmationCustom(
            PexReader reader,
            IObject item);

    }

}
namespace Mutagen.Bethesda.Skyrim.Pex
{
    #region Pex Write Mixins
    public static class ObjectPexTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectGetter item,
            PexWriter writer)
        {
            ((ObjectPexWriteTranslation)item.PexWriteTranslator).Write(
                item: item,
                writer: writer);
        }

    }
    #endregion


}
#endregion

#endregion

